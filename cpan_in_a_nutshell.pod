=head1 Test modules

Recommended Test module: L<Test::More>. Provides more functionality,
better extensibility and more diagnostics than the old T<Test> module.
Downside: Test::More is part of the core only since 5.7.3.

Worthwhile additions to Test::More: L<Test::Differences> to display a
diff-like output of the comparison of two strings or data structures.

L<Test::NoWarnings>: make sure that there are no warnings generated in
your test suite. This is the opposite of Test::Warn.

L<Test::Warn>: test the creation of warnings.

=head1 List/Array modules

Handy utility functions can be found in the core module (since 5.7.3)
L<List::Util>. Functions missing in this module are gathered in the
CPAN module L<List::MoreUtils>. This module also obsoletes the CPAN
modules L<List::MoreUtil> and L<List::Utils>.

=head1 GUI toolkits

L<Tk> is mature and runs on X11, Windows and MacOSX under XDarwin.
Further alternatives are: L<Wx>, L<Gtk2>, L<Qt>, L<Prima>,
L<Win32::GUI> etc. (XXX: Add link to perlmonks page with the GUI
comparison). L<X11::Protocol> for a low-level interface to the X11
windowing system --- good in conjuction with a higher level GUI
toolkit like Tk.

=head1 GUI builder

For L<Tk>: L<ZooZ> is actively developed. It is not exactly of the
type "drag'n'drop", but seems to be useful. L<specPerl> (not on CPAN)
is old, but probably useful. L<guido> (on Sourceforge) hast no active
development anymore, and is not in a useful state.

=head1 Serialization

L<YAML> is neat: it's human readable, portable across languages, but
unfortunately the Perl implementation is buggy so that's unusable
(other than for configuration files).

L<Storable> is in the core since 5.7.3. It's fast (because implemented
in XS and using a binary format), but it's not human readable. The
file format is forward compatible and the module versions are backward
compatible, which means you can read all Storable-generated files with
a recent Storable version, but only a Storable file generated by an
old version can be read by all Storable versions. Storable has neat
features like customizable per-class hooks and the ability to
(de)serialize code references.

L<Data::Dumper> is in the core since 5.005. The output is
human-readable as it's perl code. Data::Dumper comes with an optional
XS part, but has also a pure-perl part. Deserializing is done through
eval() which is probably dangerous, Safe::reval should be preferred.
Deserializing is a little bit unhandy. Data::Dumper is also able to
serialize code references.

L<Data::Dump::Streamer> is maybe worthwhile to take a look on XXX.

L<Data::Denter> is a predecessor of YAML.

=head1 Config/Ini files

L<YAML> is both good for (de)serialization and config files. API is
very simple to use. Note the overwhelming bug list on
L<http://rt.cpan.org>, but for normal configuration files it should
work OK.

L<savevars>: my own pragma module for conveniently storing and
retrieving a configuration.

L<Config::IniFiles>: most people recommend this module for Windows-ini
styled configuration files.

L<XML::Simple>: out-of-the-box serialization is not possible without
fiddling with a lot of options

=head2 Serialization to other languages

L<Data::JavaScript> from perl to javascript, can handle circular
structures, but output is quite verbose

L<Data::JavaScript::Anon> from perl to javascript, cannot handle
circular references, but the output is terse compared to
Data::JavaScript

L<YAML>, see above.

L<XML::Simple>, see above and below.

=head1 XML related modules

Best reference is probably L<http://perl-xml.sourceforge.net/>,
containing the Perl XML FAQ.

=head2 Parser

L<XML::Parser>: the mother of all XML processing modules. It works,
though on a very low level (if you compare with other fields Perl is
strong). I suspect it's just the fact that a DOM/XML tree does not
easily fit into the hash/array/scalar world of Perl.

=head2 Parser/Generators
L<XML::LibXML>, an interface to the libxml2 library. Used the SAX
parser --- low-level work, but worked OK.

L<XML::Simple>, an high-level interface. For serious work there's a
lot of options to fiddle with, but the documentation is extensive and
marks the options which are important and which are not.

=head2 Utilities

L<Tk::XMLViewer> displays an XML tree in a Tk window.

=head1 Graphic libraries

The classic one is L<GD>. It is not exactly easy to install, because
it has as libgd as a prerequisite, which is not always pre-installed.
To complicate matters, there are incompatible versions of GD and libgd
(1 and 2). Older versions of libgd1 had gif support, which was removed
for patent reasons. So many OS distributions still use the older
version to remain backwards compatibility. Maybe these things will
settle as the patent expired and newer libgd2 and GD2 versions come
with gif support again. libgd2 also has true color support, and there
is also true font support.

L<Image::Magick> (also known as PerlMagick) is, compared to GD, slow
but creates superior results. It's also not so easy to install because
of the dependency of the imagemagick program/library. An alternative
is L<Graphics::Magick> (more stable, but not yet --- 2005-02-14 --- on
CPAN).

L<Imager> is a library which comes with the graphic library bundled in
the perl module distribution. So you only need the low-level libraries
like libpng and libjpeg installed on your system. The version number
of Imager is still 0.something, so expect that things do not work as
expected.

Not a perl module, but still usable from a perl script/module is
netpbm (to be found on sourceforge). netpbm is a collection of filter
programs which can be piped together. For example: to resize a gif
image just use: giftoppm file.gif | pnmresize <size> | ppmtogif >
newfile.gif.

L<GraphViz> is a B<graph> library. Feed in a graph or tree and get a
graph as gif or postscript or Perl/Tk canvas output or ...

L<Image::LibRSVG> converts svg graphics into popular image formats.

=head1 Graphic utitilies

L<Image::Size> and L<Image::Info> may be used to get information about
an image file (like size, mime format etc.). (XXX Check the exact
differences between those two).

=head1 Charts

L<GD::Graph> is a nice package to create plots, charts, pie diagrams
etc. via the L<GD> module.

L<Chart::ThreeD::Pie> is another module to create pie diagrams via
L<GD>.

=head1 Search/fulltext engines

L<WAIT>, a fulltext engine. L<CPAN> has support for this module.

=head1 Object persistance

L<Storable> (see above) and all other (de)serialization modules. See
also L<http://poop.sourceforge.net> for a comprehensive list of perl
object persistance modules.

=head1 Development, Perl Interna

=head2 Weak references

Nowadays the preferred way is to use weaken in L<Scalar::Util>, a core
perl module. Former modules were L<WeakRef> ...

=head1 Wiki

L<CGI::Wiki>: nice, modular, not out-of-the-box, but relatively easily
configurable.

L<Kwiki>: popular.

L<http://www.twiki.org> (not a CPAN module). Also popular,
feature-rich, slow.

=head1 Network

=head2 Client stuff

L<LWP>, L<LWP::UserAgent>, L<LWP::Simple> (higher level, has also HTTP
methods, but no methods like POP3, SMTP).
L<LWP>: top-level module, use this for CPAN updates
L<LWP::UserAgent>: use this for doing requests in the WWW space
L<LWP::Simple>: use this if you want an very simple interface
L<IO::All>: for an even simpler interface

libnet (L<Net::FTP>) etc. (more low-level, has FTP, but no HTTP (?),
POP3, SMTP etc.).


L<WWW::Mechanize>: a class on top of L<LWP::UserAgent>, can be used to
mechanize WWW requests. L<WWW::Automate> is similar, but outdated and
not supported anymore. L<HTTP::Recorder> is a supporting tool for
WWW::Mechanize: it acts like a proxy and spits out WWW::Mechanize
scripts. Useful for automated test systems, if it'd be supported (but
look at http://rt.cpan.org and the overwhelming bug list).

L<WWW::Mechanize::Shell> is a shell for driving WWW::Mechanize and
creating scripts for this module.

=head2 Server stuff

L<HTTP::Proxy> to create a HTTP proxy.

L<HTTP::Daemon> for a pure perl HTTP daemon. Other pure perl http
daemons: tinyhttpd, httpi (links missing). For perl support in the
Apache server see L<mod_perl> and the CGI support in Apache.

=head1 Templating systems

=head2 Standalone templating systems

There are too many around there. Just to name some:

L<Template> (Template-Toolkit), a very popular and feature-rich
system. Good documentation, good support.

L<HTML::Template>, another popular system. Not so feature-rich like
Template-Toolkit. Focus on HTML.

L<Text::ScriptTemplate>, a asp/jsp-like system to embed perl in a
template. Small and useful.

=head2 Apache

L<Apache::ASP>, to be used in conjuction with L<mod_perl>.

EmbPerl (XXX link?). Templating only?

Mason (XXX link?). Templating only?

Maypole (XXX link?). A MVC system for Apache or cgi-bin.

L<Apache::ASP>: a framework with a jsp/asp-like templating system XXX
check.

=head1 Versioning controll systems

L<VCS> and others. Look which one is the best nowadays XXX.

=head1 Hash tools

To get ordered hashes, use either L<Tie::IxHash>,
L<Tie::InsertOrderHash> or L<Tie::Hash::Indexed>.

=head1 Regexp tools

L<Regexp::Assemble>: combine multiple regexpes into one. XXX More
modules doing similar things.

=head1 Module installation

The classic module is L<CPAN>, which comes with core perl. Someday,
L<CPANPLUS> will be the successor of CPAN.pm some day (once it is
stable etc.). L<CPAN::Mini> is a module for creating a minimal mirror
of the CPAN repository.

=head1 Logic programming

A list can be found at
L<http://www.perlmonks.org/index.pl?node_id=424075>. A discussion at
L<http://www.mail-archive.com/sw-design@metaperl.com/msg00115.html>.
