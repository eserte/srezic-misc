{
    package MyPH;
    use base 'Pod::Simple::HTML';
    sub html_header_after_title {
	my $self = shift;
	if (@_) {
	    $self->SUPER::html_header_after_title(@_);
	} else {
	    $self->SUPER::html_header_after_title . "\n<h1>CPAN in a nutshell</h1>";
	}
    }
    sub html_footer {
	my $self = shift;
	if (@_) {
	    $self->SUPER::html_footer(@_);
	} else {
	     "\n<h1>Author</h1>Slaven Rezi&#x107;" . $self->SUPER::html_footer;
	}
    }
    sub force_title { "CPAN in a nutshell" }
    sub index {1}
    sub html_css { "http://search.cpan.org/s/style.css" }
}

{
    sub is_in_path {
	my($prog) = @_;
	require File::Spec;
	if (File::Spec->file_name_is_absolute($prog)) {
	    if ($^O eq 'MSWin32') {
		return $prog       if (-f $prog && -x $prog);
		return "$prog.bat" if (-f "$prog.bat" && -x "$prog.bat");
		return "$prog.com" if (-f "$prog.com" && -x "$prog.com");
		return "$prog.exe" if (-f "$prog.exe" && -x "$prog.exe");
		return "$prog.cmd" if (-f "$prog.cmd" && -x "$prog.cmd");
	    } else {
		return $prog if -f $prog and -x $prog;
	    }
	}
	require Config;
	%Config::Config = %Config::Config if 0; # cease -w
	my $sep = $Config::Config{'path_sep'} || ':';
	foreach (split(/$sep/o, $ENV{PATH})) {
	    if ($^O eq 'MSWin32') {
		# maybe use $ENV{PATHEXT} like maybe_command in ExtUtils/MM_Win32.pm?
		return "$_\\$prog"     if (-f "$_\\$prog" && -x "$_\\$prog");
		return "$_\\$prog.bat" if (-f "$_\\$prog.bat" && -x "$_\\$prog.bat");
		return "$_\\$prog.com" if (-f "$_\\$prog.com" && -x "$_\\$prog.com");
		return "$_\\$prog.exe" if (-f "$_\\$prog.exe" && -x "$_\\$prog.exe");
		return "$_\\$prog.cmd" if (-f "$_\\$prog.cmd" && -x "$_\\$prog.cmd");
	    } else {
		return "$_/$prog" if (-x "$_/$prog" && !-d "$_/$prog");
	    }
	}
	undef;
    }
}

{
    use vars '$CPAN_PREREQS';
    $CPAN_PREREQS = q(VCS Date::ICal Data::ICal Text::vCard PerlIO::gzip Email::MIME Tk Tk::More MLDBM DB_File HTML::TreeBuilder::XPath CPAN::DistnameInfo Archive::Zip Test::Reporter YAML Date::Parse Config::Perl::V);
}

all: permissions

/tmp/cpan_in_a_nutshell.html: cpan_in_a_nutshell/cpan_in_a_nutshell.pod SlayMakefile
	{
	    MyPH->parse_from_file("cpan_in_a_nutshell/cpan_in_a_nutshell.pod", "/tmp/cpan_in_a_nutshell.html");
	    "";
	}

permissions:
	cd scripts && chmod ugo+rx *
	chmod ugo+rx scripts

# XXX does not work --- tty is missing within slaymake, but is needed for password input
# XXX maybe these should go into pistachio-perl-manager.pl?
install-prereqs:
	cpan_smoke_modules -notypescript -install -perl $CPAN_PREREQS

install-prereqs-with-cpanm:
	cpanm --quiet --notest $CPAN_PREREQS

install-prereqs-with-cpan:
	cpan $CPAN_PREREQS

# XXX Unfortunately SlayMakefile does not fail if any of the targets fail
# XXX So best is to call the targets separately
test:	test-t test-compile

test-compile:
	{
	    require Test::More;
	    import Test::More;
	    plan('no_plan');
	    my $perl = is_in_path('pistachio-perl');
	    if (!$perl) {
		diag("pistachio-perl not found in PATH, fallback to standard perl");
		$perl = $^X;
	    }
	    for my $script (<scripts/*>) {
		next if $script =~ m{/00MIGRATED$};
		system($perl, '-c', $script);
		is($?, 0, "$script compiled OK");
	    }
	}

test-t:
	{
	    my @cmd = qw(prove -r t);
	    system @cmd;
	    die "@cmd failed" if $? != 0;
	}


