#!/usr/bin/perl -w
# -*- perl -*-

#
# $Id: utrace_stat,v 1.4 2007/10/13 11:21:28 eserte Exp $
# Author: Slaven Rezic
#
# Copyright (C) 1999,2002,2006 Slaven Rezic. All rights reserved.
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl itself.
#
# Mail: srezic@cpan.org
# WWW:  http://user.cs.tu-berlin.de/~eserte/
#

use strict;
use Getopt::Long;

my $mem = 0;
my $total_mem = 0;
my $peak_mem = 0;
my $min_ptr;
my $max_ptr;
my %malloc;
my %opt;

GetOptions(\%opt, "p", "showleaks|l") or
    die <<EOF;
usage: $0 [-p] [-l]

-p: show also raw utrace calls
-l: show memory leaks at end

Example usage:

    env MALLOC_OPTIONS=U ktrace -tu command arguments
    kdump | utrace_stat

EOF

my %long = (
	    # 32 bit
	    12 => [[reverse (0..3)],
		   [reverse (4..7)],
		   [reverse (8..11)],
		  ],
	    # 64 bit
	    24 => [[reverse (0..7)],
		   [reverse (8..15)],
		   [reverse (16..23)],
		  ],
	   );
my %zero = (12 => "0"x8,
	    24 => "0"x16,
	   );

while(<>) {
    if (!$opt{"p"} && /^(?:\s*\d+\s\S+\s*)(?:CALL|RET)\s+utrace/) {
	# skip
    } elsif (/^(\s*\d+\s\S+\s*)USER\s+(\d+)\s+(.*)/) {
	my($pre) = $1;
	my(@v) = split(/\s+/, $3);
	my $l = $2;
	if ($l == 12 || $l == 24) { # malloc et al. (32 bit/64 bit)
	    my $sign;
	    if (join("",@v[@{$long{$l}[0]}]) eq $zero{$l}) { # alloc
		my $size = hex(join("",@v[@{$long{$l}[1]}]));
		my $ptr  = hex(join("",@v[@{$long{$l}[2]}]));
		if ($size == 0 && $ptr == 0) {
		    printf "${pre}malloc init\n";
		} else {
		    $mem += $size;
		    $total_mem += $size;
		    if ($mem > $peak_mem) {
			$peak_mem = $mem;
		    }
		    $malloc{$ptr} = $size;
		    printf "${pre}malloc(%d) => 0x%08x\n", $size, $ptr;
		    if (!defined $min_ptr || $ptr < $min_ptr) {
			$min_ptr = $ptr;
		    }
		    if (!defined $max_ptr || $ptr > $max_ptr) {
			$max_ptr = $ptr;
		    }
		}
	    } else { # free/realloc
		my $r    = hex(join("",@v[@{$long{$l}[2]}]));
		my $size = hex(join("",@v[@{$long{$l}[1]}]));
		my $ptr  = hex(join("",@v[@{$long{$l}[0]}]));
		if ($size == 0) { # free
		    if (!exists $malloc{$ptr}) {
			warn "free: No malloc for $ptr detected?";
		    } else {
			$mem -= $malloc{$ptr};
			my $bytes = delete $malloc{$ptr};
			printf "${pre}free(0x%08x) ($bytes bytes)\n", $ptr, $bytes;
		    }
		} else { # realloc
		    if (!exists $malloc{$ptr}) {
			warn "realloc: No malloc for $ptr detected?";
		    } else {
			$mem -= $malloc{$ptr};
			$total_mem -= $malloc{$ptr};
			delete $malloc{$ptr};
			$mem += $size;
			$total_mem += $size;
			$malloc{$r} = $size;
			if ($mem > $peak_mem) {
			    $peak_mem = $mem;
			}
			printf "${pre}realloc(0x%08x, %d) => 0x%08x\n", $ptr, $size, $r;
			if (!defined $min_ptr || $r < $min_ptr) {
			    $min_ptr = $r;
			}
			if (!defined $max_ptr || $r > $max_ptr) {
			    $max_ptr = $r;
			}
		    }
		}
	    }
	} else {
	    warn "Unhandled USER $l";
	}
    } else {
	print $_;
    }
}

printf "Still allocated memory: %d\n", $mem;
printf "Memory peak: %d\n", $peak_mem;
printf "Total allocated memory: %d\n", $total_mem;
printf "Delta: %d (0x%08x - 0x%08x)\n", $max_ptr-$min_ptr, $min_ptr, $max_ptr; 

if ($opt{showleaks}) {
    print "Memory leaks, sorted by size:\n";
    print join "",
	map { sprintf "0x%08x %d\n", $_, $malloc{$_} }
	    sort { $malloc{$b} <=> $malloc{$a} }
		keys %malloc;
}

__END__
