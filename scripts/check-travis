#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long;

sub check_travis ($);
sub debug ($);

my $debug;
GetOptions("d|debug" => \$debug)
    or die "usage: $0 [--debug] user/repo\n";
my $repo = shift
    or die "usage: $0 [--debug] user/repo\n";
my $success = check_travis $repo;
exit($success ? 0 : 1);

{
    # XXX taken from deployment.pl in CPAN-Testers-Matrix

    sub check_travis ($) {
	my($repo) = @_;
	chomp(my $current_commit_id = `git log -1 --format=format:'%H'`);
	if (!$current_commit_id) {
	    die "Unexpected: cannot find a commit";
	}
	require LWP::UserAgent;
	require JSON::XS;
	my $ua = LWP::UserAgent->new(timeout => 10);
	my $wait = sub {
	    for (reverse(0..14)) {
		print STDERR "\rwait $_ second(s)";
		sleep 1;
	    }
	    print STDERR "\n";
	};

	my $build_id;
	{
	    my $builds_url = "http://api.travis-ci.org/repos/$repo/builds";
	    my $get_current_build = sub {
		debug "About to get from $builds_url";
		my $res = $ua->get($builds_url);
		if (!$res->is_success) {
		    die "Request to $builds_url failed: " . $res->status_line;
		}
		debug "Fetch successful";
		my $data = JSON::XS::decode_json($res->decoded_content(charset => 'none'));
		for my $build (@$data) {
		    if ($build->{commit} eq $current_commit_id) {
			return $build;
		    }
		}
		debug "Build for commit $current_commit_id not found";
		undef;
	    };
	    while () {
		my $build = $get_current_build->();
		if (!$build) {
		    print STDERR "Cannot find commit $current_commit_id at travis, will try later...\n";
		    $wait->();
		} else {
		    $build_id = $build->{id};
		    if (!defined $build_id) {
			require Data::Dumper;
			die "Unexpected: no build id found in ". Data::Dumper::Dumper($build);
		    }
		    last;
		}
	    }
	}

	{
	    my $build_url = "http://api.travis-ci.org/repos/$repo/builds/$build_id";
	    my $get_current_build = sub {
		debug "About to get from $build_url";
		my $res = $ua->get($build_url);
		if (!$res->is_success) {
		    die "Request to $build_url failed: " . $res->status_line;
		}
		debug "Fetch successful";
		my $data = JSON::XS::decode_json($res->decoded_content(charset => 'none'));
		return $data;
	    };
	    while () {
		my $build = $get_current_build->();
		my $successful = 0;
		my $failures = 0;
		my $running = 0;
		for my $job (@{ $build->{matrix} }) {
		    if (!defined $job->{result}) {
			$running++;
		    } elsif ($job->{result} == 0) {
			$successful++;
		    } else {
			$failures++;
		    }
		}
		if ($failures) {
		    die "At least one job failed. See https://travis-ci.org/$repo for more information.\n";
		} elsif ($running == 0) {
		    last;
		}
		print STDERR "Status at travis: running=$running successful=$successful failures=$failures\n";
		$wait->();
	    }
	}

	print STDERR "travis-ci build was successful\n";
    }

    sub debug ($) {
	my $msg = shift;
	if ($debug) {
	    print STDERR "$msg\n";
	}
    }
}
