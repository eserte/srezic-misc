#!/usr/bin/perl

use strict;
use warnings;
use File::Basename qw(basename);
use Getopt::Long;
use Term::ANSIColor;

sub check_ci ($);
sub debug ($);
sub guess_project_from_git ();

my $debug;
my $check_travis;
my $check_appveyor;
GetOptions(
	   "d|debug" => \$debug,
	   "travis!" => \$check_travis,
	   "appveyor!" => \$check_appveyor,
	  )
    or die "usage: $0 [--debug] user/repo\n";
my $repo = shift || guess_project_from_git
    or die "usage: $0 [--debug] user/repo\n";
if (!$check_travis && !$check_appveyor) {
    # guess from script name
    my $basename = basename($0);
    if ($basename =~ /travis/) {
	$check_travis = 1;
    } elsif ($basename =~ /appveyor/) {
	$check_appveyor = 1;
    } else {
	# for "check-ci" or something else: check both
	$check_travis = 1;
	$check_appveyor = 1;
    }
}
if ($check_appveyor) {
    die "NYI: --appveyor checks";
}

my $success = check_ci $repo;
exit($success ? 0 : 1);

{
    # initially taken from deployment.pl in CPAN-Testers-Matrix

    sub check_ci ($) {
	my($repo) = @_;
	chomp(my $current_commit_id = `git log -1 --format=format:'%H'`);
	if (!$current_commit_id) {
	    die "Unexpected: cannot find a commit";
	}
	require LWP::UserAgent;
	require JSON::XS;
	my $ua = LWP::UserAgent->new(timeout => 10);
	my $wait = sub {
	    for (reverse(0..14)) {
		print STDERR "\rwait $_ second" . ($_ != 1 ? "s " : "  ");
		sleep 1 if $_ > 0;
	    }
	    print STDERR "\r";
	};

	my $build_id;
	{
	    my $builds_url = "http://api.travis-ci.org/repos/$repo/builds";
	    my $get_current_build = sub {
		debug "About to get from $builds_url";
		my $res = $ua->get($builds_url);
		if (!$res->is_success) {
		    die "Request to $builds_url failed: " . $res->status_line;
		}
		debug "Fetch successful";
		my $data = JSON::XS::decode_json($res->decoded_content(charset => 'none'));
		for my $build (@$data) {
		    if ($build->{commit} eq $current_commit_id) {
			return $build;
		    }
		}
		debug "Build for commit $current_commit_id not found";
		undef;
	    };
	    while () {
		my $build = $get_current_build->();
		if (!$build) {
		    print STDERR "Cannot find commit $current_commit_id at $builds_url, will try later...\n";
		    $wait->();
		} else {
		    $build_id = $build->{id};
		    if (!defined $build_id) {
			require Data::Dumper;
			die "Unexpected: no build id found in ". Data::Dumper::Dumper($build);
		    }
		    last;
		}
	    }
	}

	{
	    my $build_url = "http://api.travis-ci.org/repos/$repo/builds/$build_id";
	    my $get_current_build = sub {
		debug "About to get from $build_url";
		my $res = $ua->get($build_url);
		if (!$res->is_success) {
		    die "Request to $build_url failed: " . $res->status_line;
		}
		debug "Fetch successful";
		my $data = JSON::XS::decode_json($res->decoded_content(charset => 'none'));
		return $data;
	    };
	    my $maybe_colored = sub {
		my($title, $number, $color) = @_;
		my $msg = "$title=$number";
		if ($number == 0) {
		    $msg;
		} else {
		    colored($msg, $color);
		}		    
	    };
	    while () {
		my $build = $get_current_build->();
		my $successful = 0;
		my $failures = 0;
		my $running = 0;
		for my $job (@{ $build->{matrix} }) {
		    if (!defined $job->{finished_at}) {
			$running++;
		    } elsif (defined $job->{result} && $job->{result} == 0) {
			$successful++;
		    } else {
			$failures++;
		    }
		}
		print STDERR "Status at travis: ".
		    $maybe_colored->("running",    $running,    "yellow")." ".
		    $maybe_colored->("successful", $successful, "green")." ".
		    $maybe_colored->("failures",   $failures,   "red")."\n";
		if ($failures) {
		    die "At least one job failed. See https://travis-ci.org/$repo for more information.\n";
		} elsif ($running == 0) {
		    last;
		}
		$wait->();
	    }
	}

	print STDERR "travis-ci build was successful\n";
    }

    sub debug ($) {
	my $msg = shift;
	if ($debug) {
	    print STDERR "$msg\n";
	}
    }
}

sub guess_project_from_git () {
    chomp(my(@l) = `git remote -v 2>/dev/null`);
    # example: origin  git://github.com/eserte/doit.git (fetch)
    for my $l (@l) {
	if ($l =~ m{^origin\s+(\S+)}) {
	    my $project = $1;
	    $project =~ s{\.git$}{};
	    $project =~ s{^git\@github.com:}{};
	    $project =~ s{.*/([^/]+/[^/]+)$}{$1};
	    return $project if defined $project && length $project;
	}
    }
    warn "Cannot guess project from current directory...\n";
    undef;
}
