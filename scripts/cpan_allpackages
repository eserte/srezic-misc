#!/usr/bin/perl -w
# -*- perl -*-

#
# $Id: cpan_allpackages,v 1.6 2008/03/01 23:31:29 eserte Exp $
# Author: Slaven Rezic
#
# Copyright (C) 2008 Slaven Rezic. All rights reserved.
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl itself.
#
# Mail: slaven@rezic.de
# WWW:  http://www.rezic.de/eserte/
#

use strict;
use Config;
use CPAN;
use DB_File;
use Fcntl;
use Getopt::Long;

{
    # monkeypatch to allow keepalive connections
    package CPAN::LWP::UserAgent;
    sub new {
	my $self = shift;
	$self->SUPER::new(@_, keep_alive => 4);
    }
}

my $thisperl = "perl-".$Config{version};
my $thisarch = $Config{archname} . " " . $Config{osvers};

my $perl;
GetOptions("perl=s" => \$perl)
    or die "usage?";
if ($perl) {
    $thisperl = "perl-".`$perl -MConfig -e 'print \$Config{version}'`;
    $thisarch = `$perl -MConfig -e 'print \$Config{archname}." ".\$Config{osvers}'`;
    warn "Checking for perl=$thisperl arch=$thisarch...\n";
}

my $all_dist = all_distributions();
my $tested_dist = parse_reports_sent();
my $tested_released_dist = $tested_dist->{released};

my %test_status;
my $tested_count = 0;
my $untested_count = 0;
while(my($distname, $distinfo) = each %$all_dist) {
    if (!exists $tested_released_dist->{$distname}) {
	$test_status{$distname} = ["untested", $distinfo];
	$untested_count++;
    } elsif (!exists $tested_released_dist->{$distname}->{$thisperl}) {
	$test_status{$distname} = ["not this perl (but: " . join(" ", sort keys %{$tested_released_dist->{$distname}}) . ")",
				   $distinfo
			          ];
    } elsif (!exists $tested_released_dist->{$distname}->{$thisperl}->{$thisarch}) {
	$test_status{$distname} = ["not this arch (but: " . join(" ", sort keys %{$tested_released_dist->{$distname}->{$thisperl}}) . ")",
				   $distinfo
			          ];
    } else {
	my $tested_version = safe_version($tested_released_dist->{$distname}->{$thisperl}->{$thisarch}->version);
	my $latest_version = safe_version($distinfo->version);
	if ($tested_version >= $latest_version) {
	    $test_status{$distname} = ["tested", $distinfo];
	    $tested_count++;
	} else {
	    $test_status{$distname} = ["not the latest version $latest_version (but: $tested_version)", $distinfo];
	}
    }
}

tie my %dist2uploaddate, 'DB_File', "$ENV{HOME}/var/dist2uploaddate.db", O_RDWR|O_CREAT, 0644
    or die $!;

for my $distname (sort keys %test_status) {
    my($status, $distinfo) = @{ $test_status{$distname} };
    #printf "%-40s %s\n", $distname, $status;
    my $upload_date;
    my $distpath = $distinfo->cpanid."/".$distinfo->filename;
    if (exists $dist2uploaddate{$distpath}) {
	$upload_date = $dist2uploaddate{$distpath};
    }
    if (!$upload_date && $status ne 'tested') {
	# This is slow!!! XXX
	# Better to have a http CPAN mirror, usually faster.
	my $dist = CPAN::Shell->expand("Distribution", $distpath);
	if ($dist) {
	    $upload_date = $dist->upload_date;
	    if ($upload_date) {
		$dist2uploaddate{$distpath} = $upload_date;
	    }
	}
    }
    $upload_date = "????-??-??" if !$upload_date;
    printf "%s %-60s %s\n", $upload_date, $distpath, $status;
}

{
    my $all_dist_count = scalar keys %$all_dist;
    print <<EOF;
# Latest tested:       $tested_count/$all_dist_count (@{[ sprintf "%.1f%%", 100*$tested_count/$all_dist_count]})
# Completely untested: $untested_count/$all_dist_count (@{[ sprintf "%.1f%%", 100*$untested_count/$all_dist_count]})
EOF
}

sub all_distributions { # takes ~3 seconds
    use CPAN::DistnameInfo;
    use PerlIO::gzip;
    my %dist;
    open my $FH, "<:gzip", "/usr/local/src/CPAN/sources/modules/02packages.details.txt.gz"
	or die $!;
    my $state = "h";
    while(<$FH>) {
	if ($state eq 'h') {
	    if (/^$/) {
		$state = 'b';
	    }
	} else {
	    my(undef,undef, $dist) = split;
	    my $d = CPAN::DistnameInfo->new($dist);
	    my $distname = $d->dist;
	    if (defined $distname && !exists $dist{$distname}) {
		$dist{$distname} = $d;
	    }
	}
    }
    \%dist;
}

sub parse_reports_sent {
    use version;
    my %dist;
    open my $fh, "$ENV{HOME}/.cpanreporter/reports-sent.db"
	or die $!;
    while(<$fh>) {
	next if /^#/;
	chomp;
	if (my($phase, $action, $dist, $perl, $arch) =
		$_ =~ m{^
			(\S+)\s+
			(\S+)\s+
			(\S+)\s+
			\(([^\)]+)\)\s+
			(.+)
			$}x) {
	    my $d = CPAN::DistnameInfo->new($dist.".tar.gz");
	    my $maturity = $d->maturity;
	    if (my $old_d = $dist{$maturity}->{$d->dist}->{$perl}->{$arch}) {
		if (safe_version($d->version) <= safe_version($old_d->version)) {
		    next;
		}
	    }
	    $dist{$maturity}->{$d->dist}->{$perl}->{$arch} = $d;
	} else {
	    warn "Cannot parse line $_";
	}
    }
    \%dist;
}

# from cpantestersmatrix:
sub safe_version {
    my $version_string = shift;
    while(length $version_string) {
	local $^W;
	my $version = eval { version->new($version_string) };
	if (!$@) {
	    return $version;
	}
	$version_string = substr($version_string,0,-1);
    }
    "0";
}

__END__
