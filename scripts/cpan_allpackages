#!/usr/bin/perl -w
# -*- perl -*-

#
# $Id: cpan_allpackages,v 1.25 2011/04/15 06:39:03 eserte Exp $
# Author: Slaven Rezic
#
# Copyright (C) 2008 Slaven Rezic. All rights reserved.
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl itself.
#
# Mail: slaven@rezic.de
# WWW:  http://www.rezic.de/eserte/
#

use strict;
use Config;
use CPAN;
use Cwd qw(realpath);
use DB_File;
use Fcntl;
use File::Basename qw(dirname);
use Getopt::Long;

{
    # monkeypatch to allow keepalive connections
    package CPAN::LWP::UserAgent;
    no warnings 'redefine';
    sub new {
	my $self = shift;
	$self->SUPER::new(@_, keep_alive => 4);
    }
}

my $thisperl = "perl-".$Config{version};
if ($Config{perl_patchlevel}) {
    $thisperl .= " patch $Config{perl_patchlevel}";
}
my $thisarch = $Config{archname} . " " . $Config{osvers};

my $perl;
my $slow;
my $recent;
my $recentslow;
my $recentfile;
my $prefer_download = "ftp";
GetOptions("perl=s" => \$perl,
	   "slow!"  => \$slow,
	   "recent=i" => \$recent,
	   "recentslow=i" => \$recentslow,
	   "recentfile=s" => \$recentfile,
	   "prefer=s" => \$prefer_download,
	  )
    or die <<EOF;
usage: $0 [-perl exe] [-recent days | -recentslow days | -recentfile file] [-prefer ftp|http]
EOF

if ($perl) {
    $thisperl = "perl-".`$perl -MConfig -e 'print \$Config{version}'`;
    my $thispatch = `$perl -MConfig -e 'print \$Config{perl_patchlevel}'`;
    if ($thispatch) {
	$thisperl .= " patch $thispatch";
    }
    $thisarch = `$perl -MConfig -e 'print \$Config{archname}." ".\$Config{osvers}'`;
    warn "Checking for perl=$thisperl arch=$thisarch...\n";
}

## Taken code from cpan_smoke_modules:
# Set PERL_CPAN_REPORTER_DIR if $prefix/.cpanreporterdir file exists
local $^W = 0; # no warning if PERL_CPAN_REPORTER_DIR is unset
local $ENV{PERL_CPAN_REPORTER_DIR} = $ENV{PERL_CPAN_REPORTER_DIR} if $ENV{PERL_CPAN_REPORTER_DIR};
if (!$ENV{PERL_CPAN_REPORTER_DIR}) {
    if ($perl) {
	my $perl_prefix = `$perl -MConfig -e 'print \$Config{prefix}'`;
	if ($perl_prefix && open my $fh, "$perl_prefix/.cpanreporterdir") {
	    chomp(my $reporter_dir = <$fh>);
	    if ($reporter_dir) {
		if (!-d $reporter_dir) {
		    warn "Specified reporter dir <$reporter_dir> does not exist, cannot use...";
		} else {
		    warn "Using .cpanreporter directory $reporter_dir...\n";
		    $ENV{PERL_CPAN_REPORTER_DIR} = $reporter_dir;
		}
	    }
	}
    }
}

if (!-d "$ENV{HOME}/var") {
    die "Please create directory $ENV{HOME}/var";
}

my $dist2uploaddate_db = "$ENV{HOME}/var/dist2uploaddate.db";
if ($^O eq 'linux') {
    $dist2uploaddate_db =~ s{(\.db)}{-linux$1};
}

tie my %dist2uploaddate, 'DB_File', $dist2uploaddate_db, O_RDWR|O_CREAT, 0644
    or die "Can't tie to $dist2uploaddate_db: $!";

my $all_dist = ($recent     ? recent_distributions(recent     => $recent) :
		$recentfile ? recent_distributions(recentfile => $recentfile) :
		$recentslow ? recent_distributions(recentslow => $recentslow) :
		all_distributions()
	       );
my $tested_dist = parse_reports_sent();
my $tested_released_dist = $tested_dist->{released};

my %test_status;
my $tested_count = 0;
my $untested_count = 0;
while(my($distname, $distinfo) = each %$all_dist) {
    if (!exists $tested_released_dist->{$distname}) {
	$test_status{$distname} = ["untested", $distinfo];
	$untested_count++;
    } elsif (!exists $tested_released_dist->{$distname}->{$thisperl}) {
	$test_status{$distname} = ["not this perl (but: " . join(" ", sort keys %{$tested_released_dist->{$distname}}) . ")",
				   $distinfo
			          ];
    } elsif (!exists $tested_released_dist->{$distname}->{$thisperl}->{$thisarch}) {
	$test_status{$distname} = ["not this arch (but: " . join(" ", sort keys %{$tested_released_dist->{$distname}->{$thisperl}}) . ")",
				   $distinfo
			          ];
    } else {
	my $x = $tested_released_dist->{$distname}->{$thisperl}->{$thisarch}; # XXX varname?
	my $tested_version = safe_version($x->{dist}->version);
	my $latest_version = safe_version($distinfo->version);
	if ($tested_version >= $latest_version) {
	    $test_status{$distname} = ["tested $x->{result}", $distinfo];
	    $tested_count++;
	} else {
	    # scramble, so a naïve grep does not match:
	    (my $scrambled_result = $x->{result}) =~ tr{AIUS}{ÄÏÜ\$};
	    $test_status{$distname} = ["not the latest version $latest_version (but: $tested_version with '$scrambled_result')", $distinfo];
	}
    }
}

CPAN::HandleConfig->load;
$CPAN::Config->{show_upload_date} = 1;
if ($prefer_download eq 'http') {
    my($http_url) = grep { /^http:/ } @{ $CPAN::Config->{urllist} };
    if ($http_url) {
	# Well, it's not clear if HTTP is really faster...
	unshift @{ $CPAN::Config->{urllist} }, $http_url;
    } else {
	warn "NOTE: No http URL in urllist available, using possibly slower ftp...\n";
    }
}

# Takes ~3 - 25s (depending on missing stuff)
for my $distname (sort keys %test_status) {
    my($status, $distinfo) = @{ $test_status{$distname} };
    #printf "%-40s %s\n", $distname, $status;
    my $upload_date;
    my $distpath = $distinfo->cpanid."/".$distinfo->filename;
    if (exists $dist2uploaddate{$distpath}) {
	$upload_date = $dist2uploaddate{$distpath};
    }
    if (!$upload_date && ($slow || $status ne 'tested')) {
	# This is slow!!! XXX
	# Better to have a http CPAN mirror, usually faster.
	my $dist = CPAN::Shell->expand("Distribution", $distpath);
	if ($dist) {
	    $upload_date = $dist->upload_date;
	    if ($upload_date) {
		$dist2uploaddate{$distpath} = $upload_date;
	    }
	}
    }
    $upload_date = "????-??-??" if !$upload_date;
    printf "%s %-60s %s\n", $upload_date, $distpath, $status;
}

{
    my $all_dist_count = scalar keys %$all_dist;
    print <<EOF;
# Latest tested:       $tested_count/$all_dist_count (@{[ sprintf "%.1f%%", 100*$tested_count/$all_dist_count]})
# Completely untested: $untested_count/$all_dist_count (@{[ sprintf "%.1f%%", 100*$untested_count/$all_dist_count]})
EOF
}

sub all_distributions { # takes ~3 seconds
    CPAN::HandleConfig->load;
    my $packages_file = $CPAN::Config->{keep_source_where} . "/modules/02packages.details.txt.gz";
    use CPAN::DistnameInfo 0.10; # TRIAL support
    use PerlIO::gzip;
    my %dist;
    open my $FH, "<:gzip", $packages_file
	or die "Cannot open $packages_file: $!";
    my $state = "h";
    while(<$FH>) {
	if ($state eq 'h') {
	    if (/^$/) {
		$state = 'b';
	    }
	} else {
	    my(undef,undef, $dist) = split;
	    my $d = CPAN::DistnameInfo->new($dist);
	    my $distname = $d->dist;
	    if (defined $distname && !exists $dist{$distname}) {
		$dist{$distname} = $d;
	    }
	}
    }
    \%dist;
}

sub recent_distributions {
    my(%args) = @_;
    my %dist;
    my $FH;
    use CPAN::DistnameInfo;
    my $recent_prog = dirname(realpath $0) . "/cpan_recent_uploads";
    if ($args{recentslow}) {
	open $FH, "-|", $recent_prog, "-k", "isodate,subject", $args{recentslow}
	    or die $!;
    } elsif ($args{recent}) {
	open $FH, "-|", $recent_prog, $args{recent}
	    or die $!;
    } elsif ($args{recentfile}) {
	open $FH, $args{recentfile}
	    or die "Cannot open $args{recentfile}: $!";
    } else {
	die "Either specify recent, recentslow or recentfile";
    }
    while(<$FH>) {
	chomp;
	my($date,$dist);
	if ($recent) {
	    $dist = $_;
	} else {
	    $date =~ s{T\d.*}{};
	    $dist =~ s{CPAN Upload: }{};
	}
	my $d = CPAN::DistnameInfo->new($dist);
	my $distname = $d->dist;
	my $cpanid = $d->cpanid;
	if (defined $distname && defined $cpanid && !exists $dist{$distname}) {
	    $dist{$distname} = $d;
	    my $distpath = $cpanid."/".$d->filename;
	    if (defined $date) {
		$dist2uploaddate{$distpath} = $date;
	    }
	}
    }
    \%dist;
}

sub parse_reports_sent { # takes ~3 seconds
    my %dist;
    my $cpan_reporter_dir = $ENV{PERL_CPAN_REPORTER_DIR} || "$ENV{HOME}/.cpanreporter";
    my $reports_sent_file = "$cpan_reporter_dir/reports-sent.db";
    if (!open my $fh, $reports_sent_file) {
	warn "Can't open $reports_sent_file: $!, skip this part...\n";
    } else {
	while(<$fh>) {
	    next if /^#/;
	    chomp;
	    if (my($phase, $action, $dist, $perl, $arch) =
		$_ =~ m{^
			(\S+)\s+
			(\S+)\s+
			(\S+)\s+
			\(([^\)]+)\)\s+
			(.+)
			$}x) {
		my $d = CPAN::DistnameInfo->new($dist.".tar.gz");
		my $maturity = $d->maturity;
		if (my $old_d = $dist{$maturity}->{$d->dist}->{$perl}->{$arch}) {
		    if (safe_version($d->version) < safe_version($old_d->{dist}->version)) {
			next;
		    } elsif (safe_version($d->version) == safe_version($old_d->{dist}->version)) {
			$dist{$maturity}->{$d->dist}->{$perl}->{$arch}->{result} .= ", $phase $action";
			next;
		    }
		}
		$dist{$maturity}->{$d->dist}->{$perl}->{$arch} = {dist => $d,
								  result => "$phase $action",
								 };
	    } else {
		warn "Cannot parse line $_";
	    }
	}
    }
    \%dist;
}

# from cpantestersmatrix:
sub safe_version {
    my $version_string = shift;
    use version;
    #no warnings 'uninitialized'; # XXX why is this line causing *more* warnings???
    no warnings;
    while(length $version_string) {
	local $^W;
	my $version = eval { version->new($version_string) };
	if (!$@) {
	    return $version;
	}
	$version_string = substr($version_string,0,-1);
    }
    "0";
}

__END__

=head1 NAME

cpan_allpackages - create list of all active CPAN distribution

=head1 DESCRIPTION

The format of the list is: ISO date, full distribution path with
author, and the the test status from previous runs with the current
perl (or with a perl specified with C<-perl>.

=head1 BUGS

CPAN.pm diagnostics messages appear in the output. To workaround this,
grep for lines which start with a ISO date (i.e.
C<< /^\d\d\d\d-\d\d-\d\d/ >>) 

First time run is slow, because a lot of files from CPAN need to be
fetched.

=cut
