#!/usr/bin/perl -w
# -*- perl -*-

#
# $Id: multiperltest,v 1.6 2007/10/22 22:33:29 eserte Exp $
# Author: Slaven Rezic
#
# Copyright (C) 2002,2004 Slaven Rezic. All rights reserved.
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl itself.
#
# Mail: slaven@rezic.de
# WWW:  http://www.rezic.de/eserte/
#

# XXX implement: if modern CPAN is available, then use it for "cpan -t
# ."-style testing (maybe?)
# XXX nice to have: Text::Table formatting
# XXX maybe sort by failure?

use strict;
use File::Basename;
use Cwd;
use Data::Dumper;
use Getopt::Long;

my $use_xnest;
my $xvfb_display = "localhost:121"; # force TCP connection to X11 because of stupid problems with my X11
my $need_x_server;
my $only_perl;

if (!GetOptions("xnest" => \$use_xnest,
		"display=s" => \$xvfb_display,
		"needx!" => \$need_x_server,
		"onlyperl=s" => \$only_perl,
	       )) {
    die "usage: $0 [-xnest] [-display DISPLAY] [-needx] [-onlyperl binary]";
}
(my $xvfb_display_nr = $xvfb_display) =~ s/^.*://;

$ENV{BATCH} = 1;

my @perl = (
	    {default => 1}, # would use default perl, either /usr/local/bin/perl or /usr/bin/perl
	    # The maintenance perls
	    {exec => 'perl5.8.8'},
	    {exec => 'perl5.8.8t'},
	    # The bleedperls
	    {exec => 'perl5.10.0'},
	    #{exec => 'perl5.9.5'},
	    {exec => 'perl5.9.5t'},
	    # A buggy popular perl (RedHat8.0)
	    {exec => 'perl5.8.0'},
	    # Older major versions:
	    {exec => 'perl5.6.2'},
	    #{exec => 'perl5.6.1'},
	    {exec => 'perl5.00505'},
	    {exec => 'perl5.00503d'},
	    {exec => 'perl5.00404', env => { LANG => 'C', # otherwise much noise is created on my machine
					     LC_CTYPE => 'C',
					     LC_ALL => 'C',
					   },
	    },
	    # Some other stuff:
	    {exec => 'perl5.8.7'},
	    {exec => 'perl5.8.6'},
	    {exec => 'perl5.8.3d'},
	    {exec => 'perl5.8.2d'},
	    {exec => 'perl5.8.1'},
# 	 {exec => '/usr/local/src/bleedperl/perl',
# 	  env => { PERL5LIB => '/usr/local/src/bleedperl/lib' },
# 	 }
	   );

for (@perl) {
    if ($_->{default}) {
	$_ = {exec => $^X};
    }
}

@perl = grep { is_in_path($_->{exec}) } @perl;

if ($only_perl) {
    my @all_perls = @perl;
    @perl = grep { $_->{'exec'} eq $only_perl } @perl;
    if (!@perl) {
	die "No perl found with argument <$only_perl>\n(" . join(",", map { $_->{'exec'} } @all_perls) . ")\n";
    }
}

my $basedistdir = basename cwd;
if ($basedistdir =~ /^Tk-/) {
    $need_x_server = 1;
}

my $xvfb_pid;
if ($need_x_server) {
    if (open(PID, "/tmp/.X$xvfb_display_nr-lock")) {
	chomp(my $pid = <PID>);
	close PID;
	$pid+=0;
	warn "Kill old server with pid $pid ...\n";
	kill KILL => $pid;
    }

    warn "Starting X11 server $xvfb_display ...\n";
    $xvfb_pid = fork;
    if ($xvfb_pid == 0) {
	if ($use_xnest) {
	    exec("Xnest", "-geometry", "640x400", ":$xvfb_display_nr");
	} else {
	    exec("Xvfb", "-fp", "/usr/X11R6/lib/X11/fonts/misc", "-ac", ":$xvfb_display_nr");
	}
	die $!;
    }

    $ENV{DISPLAY} = $xvfb_display;
}

foreach my $perl (@perl) {
    print STDERR "#" x 70, "\n";
    print STDERR "# " . $perl->{exec} . "...\n";
    $perl->{success} = 0;
    local %ENV = %ENV;
    if ($perl->{env}) {
	while(my($k,$v) = each %{ $perl->{env} }) {
	    $ENV{$k} = $v;
	}
    }
    system($perl->{exec}, "Makefile.PL");
    if ($? != 0) {
	$perl->{why} = "Makefile.PL failed";
	warn "$perl->{why}...\n";
    } else {
	system("make");
	if ($? != 0) {
	    $perl->{why} = "make failed";
	    warn "$perl->{why}...\n";
	} else {
	    system("make", "disttest");
	    if ($? != 0) {
		$perl->{why} = "make disttest failed";
		warn "$perl->{why}...\n";
	    } else {
		$perl->{success} = 1;
	    }
	}
	system("make","realclean");
    }
}

if (defined $xvfb_pid) {
    kill KILL => $xvfb_pid;
}


print STDERR Data::Dumper->new([\@perl],[])->Indent(1)->Useqq(1)->Dump;

# REPO BEGIN
# REPO NAME is_in_path /home/e/eserte/work/srezic-repository 
# REPO MD5 81c0124cc2f424c6acc9713c27b9a484

=head2 is_in_path($prog)

=for category File

Return the pathname of $prog, if the program is in the PATH, or undef
otherwise.

DEPENDENCY: file_name_is_absolute

=cut

sub is_in_path {
    my($prog) = @_;
    return $prog if (file_name_is_absolute($prog) and -f $prog and -x $prog);
    require Config;
    my $sep = $Config::Config{'path_sep'} || ':';
    foreach (split(/$sep/o, $ENV{PATH})) {
	if ($^O eq 'MSWin32') {
	    # maybe use $ENV{PATHEXT} like maybe_command in ExtUtils/MM_Win32.pm?
	    return "$_\\$prog"
		if (-x "$_\\$prog.bat" ||
		    -x "$_\\$prog.com" ||
		    -x "$_\\$prog.exe" ||
		    -x "$_\\$prog.cmd");
	} else {
	    return "$_/$prog" if (-x "$_/$prog" && !-d "$_/$prog");
	}
    }
    undef;
}
# REPO END

# REPO BEGIN
# REPO NAME file_name_is_absolute /home/e/eserte/work/srezic-repository 
# REPO MD5 89d0fdf16d11771f0f6e82c7d0ebf3a8

=head2 file_name_is_absolute($file)

=for category File

Return true, if supplied file name is absolute. This is only necessary
for older perls where File::Spec is not part of the system.

=cut

BEGIN {
    if (eval { require File::Spec; defined &File::Spec::file_name_is_absolute }) {
	*file_name_is_absolute = \&File::Spec::file_name_is_absolute;
    } else {
	*file_name_is_absolute = sub {
	    my $file = shift;
	    my $r;
	    if ($^O eq 'MSWin32') {
		$r = ($file =~ m;^([a-z]:(/|\\)|\\\\|//);i);
	    } else {
		$r = ($file =~ m|^/|);
	    }
	    $r;
	};
    }
}
# REPO END

__END__
