#!/usr/bin/perl -w
# -*- perl -*-

#
# $Id: xmlgrep,v 1.6 2007/07/08 18:07:37 eserte Exp $
# Author: Slaven Rezic
#
# Copyright (C) 2006 Slaven Rezic. All rights reserved.
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl itself.
#
# Mail: slaven@rezic.de
# WWW:  http://www.rezic.de/eserte/
#

use strict;
use Getopt::Long;

my %opt;
GetOptions(\%opt, "as-xml!", "parse-html!")
    or die "usage!";

my $xpath = shift @ARGV;
my @files = @ARGV;

my $p;
if ($opt{'parse-html'}) {
    require HTML::TreeBuilder::XPath;
    $p = HTML::TreeBuilder::XPath->new;
} else {
    require XML::LibXML;
    $p = XML::LibXML->new;
    $p->pedantic_parser(0);
    $p->recover(1);
}

if (@files) {
    for my $file (@files) {
	open my $fh, $file
	    or warn "Can't open $file: $!", next;
	xmlgrep($fh);
    }
} else {
    xmlgrep(\*STDIN);
}

sub xmlgrep {
    my($fh) = @_;
    my $buf = do {
	local $/;
	<$fh>;
    };

    my $root;
    if ($p->isa("HTML::TreeBuilder::XPath")) {
	$p->parse($buf);
	$root = $p;
    } else {
	my $doc = $p->parse_string($buf);
	$doc or return;
	$root = $doc->documentElement;
	$root->setNamespaceDeclURI(undef, undef);
    }

    # my @result = map { $_->textContent } $root->findnodes($path);
    for my $node ($root->findnodes($xpath)) {
	if ($opt{"as-xml"}) {
	    print $node->toString, "\n";
	} else {
	    if ($node->can("to_literal")) {
		print $node->to_literal, "\n";
	    } elsif ($node->can("getValue")) { # for HTML::TreeBuilder::XPath::Attribute
		print $node->getValue, "\n";
	    } else {
		print $node->findvalue('.'), "\n";
	    }
	}
    }
}

__END__
use XML::LibXML;

my $path = shift @ARGV;
my $p = XML::LibXML->new;

if (@ARGV) {
    for my $file (@ARGV) {
        my $doc = $p->parse_file($file);
        print map { "$_\n" } find_result($doc);
    }
} else {
    my $doc = $p->parse_fh(\*STDIN);
    print map { "$_\n" } find_result($doc);
}
        
sub find_result {
    my $doc = shift;
    my $root = $doc->documentElement();
    my @result = map { $_->textContent } $root->findnodes($path);
    @result;
}
