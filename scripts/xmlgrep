#!/usr/bin/perl -w
# -*- perl -*-

#
# $Id: xmlgrep,v 1.18 2012/02/20 14:44:45 eserte Exp $
# Author: Slaven Rezic
#
# Copyright (C) 2006,2007,2009 Slaven Rezic. All rights reserved.
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl itself.
#
# Mail: slaven@rezic.de
# WWW:  http://www.rezic.de/eserte/
#

use strict;
use Getopt::Long;
use File::Basename qw(basename);

my %opt;
Getopt::Long::config('noignore_case');
GetOptions(\%opt,
	   "as-xml|asxml!",
	   "as-html|ashtml!",
	   "parse-html|parsehtml!",
           "xml-libxml-reader!",
           "with-filename|H!",
           "no-filename|h!",
           "e=s",
	  )
    or usage();

if (basename($0) =~ m{htmlgrep}) {
    $opt{'parse-html'} = 1;
}

my $xpath = shift @ARGV;
my @files = @ARGV;

my $p;
if ($opt{'parse-html'}) {
    require HTML::TreeBuilder::XPath;
    $p = HTML::TreeBuilder::XPath->new;
} elsif ($opt{'xml-libxml-reader'}) {
    if (@files != 1) {
        die "With XML::LibXML::Reader interface only exactly one file is supported";
    }
    require XML::LibXML::Reader;
    $p = XML::LibXML::Reader->new(location => $files[0]);
    xmlgrep_reader();
    exit;
} else {
    require XML::LibXML;
    $p = XML::LibXML->new;
    $p->pedantic_parser(0);
    $p->recover(1);
}

if (@files) {
    my $do_prepend_filename = @files > 1;
    if ($opt{'with-filename'}) {
        $do_prepend_filename = 1;
    } elsif ($opt{'no-filename'}) {
        $do_prepend_filename = 0;
    }
    for my $file (@files) {
	open my $fh, $file
	    or warn "Can't open $file: $!", next;
	xmlgrep($fh,$do_prepend_filename ? $file : ());
    }
} else {
    xmlgrep(\*STDIN);
}

sub xmlgrep {
    my($fh,$file) = @_;
    my $buf = do {
	local $/;
	<$fh>;
    };

    my $root;
    if ($p->isa("HTML::TreeBuilder::XPath")) {
	$p->parse($buf);
	$root = $p;
    } else {
	my $doc = $p->parse_string($buf);
	$doc or return;
	$root = $doc->documentElement;
	$root->setNamespaceDeclURI(undef, undef);
    }

    my $cb;
    if ($opt{e}) {
        my $code = 'sub { local $_ = shift; ' . $opt{e} . '}';
        $cb = eval $code;
        die "Failure while compiling\n$code\nError: $@" if $@;
    }
    # my @result = map { $_->textContent } $root->findnodes($path);
    my $prepend_filename = $file ? "$file:" : "";
    for my $node ($root->findnodes($xpath)) {
        if ($cb) {
            print $prepend_filename, $cb->($node), "\n";
        } elsif ($opt{"as-xml"}) {
	    if ($opt{'parse-html'}) {
		die "Output of XML for parsed HTML is not implemented";
	    }
	    print $node->toString, "\n";
	} elsif ($opt{"as-html"}) {
	    if (!$opt{'parse-html'}) {
		die "Output of HTML for parsed XML is not implemented";
	    }
	    if ($node->can('getValue')) { # for HTML::TreeBuilder::XPath::Attribute
		print $node->getValue, "\n";
	    } else {
		print $node->as_HTML, "\n";
	    }
	} else {
	    if ($node->can("to_literal")) {
		print $prepend_filename, $node->to_literal, "\n";
	    } elsif ($node->can("getValue")) { # for HTML::TreeBuilder::XPath::Attribute
		print $prepend_filename, $node->getValue, "\n";
	    } else {
		print $prepend_filename, $node->findvalue('.'), "\n";
	    }
	}
    }
}

sub xmlgrep_reader {
    my $patt = XML::LibXML::Pattern->new($xpath);
    while ($p->nextPatternMatch($patt) == 1) {
        print $p->copyCurrentNode(1)->toString, "\n";
    }
}

sub fv { $_->findvalue(shift) }

sub usage {
    die <<EOF;
usage: $0 [-as-xml] [-parse-html] xpath [file ...]
EOF
}

__END__

=head1 NAME

xmlgrep - grep for XML or HTML files using XPath patterns

=head1 SYNOPSIS

    xmlgrep [-as-xml] [-parse-html] xpath [file ...]
    htmlgrep xpath [file ...]

=head1 OPTIONS

=over

=item -as-xml | -asxml

Output results as XML snippets.

=item -as-html | -ashtml

Output results as HTML snippets.

=item -parse-html | -parsehtml

Assume source files to be (possibly non-wellformed) HTML. This is the
default if this script is called as C<htmlgrep>.

=item -e perlcode

Pass the filtered nodes to a perl subroutine as C<$_>.

The convenience function C<fv> is available as a shortcut for
C<< $_->findvalue >>.

=item -with-filename | -H

Precede every result line with the filename. This is the default when
multiple files are searched.

=item -no-filename | -h

Suppress the prefixing of filenames on output when multiple files are
searched.

=back

=head1 EXAMPLES

Get all <a> links:

    xmlgrep -parse-html '/html/body//a/@href' some.html

or

    htmlgrep '/html/body//a/@href' some.html

Use C<-e>:

    xmlgrep -e '$_->findvalue("foo") . " " . $_->findvalue("bar")' //something file.xml

or with the convenience function C<fv>:

    xmlgrep -e 'fv("foo")." ".fv("bar")' //something file.xml

=head1 CREDITS

C<-e> was suggested by Andreas J. KE<ouml>nig.

=head1 AUTHOR

Slaven ReziE<0x107>

=cut

# Local Variables:
# mode: cperl
# cperl-indent-level: 4
# indent-tabs-mode: nil
# End:
# vim:sw=4:ts=8:sta:et
