#!/usr/bin/perl -w
# -*- perl -*-

#
# Author: Slaven Rezic
#
# Copyright (C) 2017,2018 Slaven Rezic. All rights reserved.
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl itself.
#
# Mail: slaven@rezic.de
# WWW:  http://www.rezic.de/eserte/
#

use strict;
use warnings;
use Getopt::Long;
use Net::OpenSSH;

sub usage () {
    die <<EOF;
usage: $0 [--debug|-d ...] [-x|--exclude=file] [--exclude-path-rx=path-rx] [--always-sudo] [--no-md5-check] host1 host2 dir ...
EOF
}

our $VERSION = '0.20';

my $debug = 0;
my @exclude;
my @exclude_path_rx;
my $diffopts;
my $right_dir;
my $always_sudo;
my $md5_check = 1;
GetOptions(
	   "d|debug+"     => \$debug,
	   'x|exclude=s@' => \@exclude,
	   'exclude-path-rx=s@' => \@exclude_path_rx,
	   'diffopts=s'   => \$diffopts,
	   'right-dir=s'  => \$right_dir,
	   'always-sudo'  => \$always_sudo,
	   'md5-check!'   => \$md5_check,
	   'v|version'    => sub {
	       require File::Basename;
	       print File::Basename::basename($0) . " " . $VERSION . "\n";
	       clean_finish();
	   },
	  ) or usage;
my $left_host = shift or usage;
my $right_host = shift or usage;
my @dirs = @ARGV;
if (!@dirs) {
    warn "Please specify directories to compare.\n";
    usage;
}
if (defined $right_dir && @dirs > 1) {
    die "ERROR: Only one directory to compare supported if --right-dir is specified.\n";
}
my $exclude_rx = '';
if (@exclude) {
    $exclude_rx = '^(' . join("|", map { quotemeta } @exclude) . ')$';
    if ($debug) {
	warn "DEBUG: exclude_rx=$exclude_rx\n";
    }
}
my $exclude_path_rx = '';
if (@exclude_path_rx) {
    for (@exclude_path_rx) { qr{$_} } # regexp syntax check
    $exclude_path_rx = '^(' . join("|", @exclude_path_rx) . ')$';
    if ($debug) {
	warn "DEBUG: exclude_path_rx=$exclude_path_rx\n";
    }
}

if ($debug >= 2) {
    require Data::Dumper;
}

my @diffopts = ('-u');
if ($diffopts) {
    require Text::ParseWords;
    push @diffopts, Text::ParseWords::shellwords($diffopts);
}

# First pass: transfer file names, together with some stat
# information, especially size, but also mode, user/group (names, not
# ids, optionally mtime). Use preferably File::Find, maybe find+printf
#
# XXX use everywhere // instead of || if perl supports it (check first)
my @cmd_without_dirs = (($always_sudo ? 'sudo' : ()), 'perl', '-Mstrict', '-Mwarnings', '-MFile::Find', "-e", <<'EOF', $exclude_rx, $exclude_path_rx);
my $exclude_rx = shift @ARGV;
if (length $exclude_rx) {
    $exclude_rx = qr{$exclude_rx};
}
my $exclude_path_rx = shift @ARGV;
if (length $exclude_path_rx) {
    $exclude_path_rx = qr{$exclude_path_rx};
}
my(%uid2name, %gid2name);
find(sub {
    if (length $exclude_rx && $_ =~ $exclude_rx) {
        $File::Find::prune = 1;
        return;
    }
    if (length $exclude_path_rx && $File::Find::name =~ $exclude_path_rx) {
        $File::Find::prune = 1;
        return;
    }
    my($dev,undef,$mode,undef,$uid,$gid,undef,$size) = lstat($_);
    $File::Find::prune |= ($dev != $File::Find::topdev);
    my $user = ($uid2name{$uid} ||= ((getpwuid($uid))[0] || "#$uid"));
    my $group = ($gid2name{$gid} ||= ((getgrgid($gid))[0] || "#$gid"));
    my $symlinkval = -l $_ ? readlink($_) : '-';
    my $type;
    if (-f $_) {
        $type = 'f';
    } else {
        if (-d $_) {
            $type = 'd';
        } else {
            $type = '?';
        }
        $size = 0;
    }
    print join("\0", $mode, $user, $group, $size, $symlinkval, $type, $File::Find::name), "\0\0";
}, @ARGV)
EOF

my($left_fname2info, $right_fname2info);

sub get_fname2info {
    my($fh, $right_dir_mapping) = @_;
    my %fname2info;
    local $/ = "\0\0";
    while(<$fh>) {
	my($mode,$user,$group,$size,$symlinkval,$type,$fname) = split /\0/, $_;
	if ($right_dir_mapping) {
	    substr($fname, 0, length($right_dir_mapping->[1]), $right_dir_mapping->[0]);
	}
	$fname2info{$fname} = {mode => $mode, type => $type, user => $user, group => $group, size => $size, symlinkval => $symlinkval};
    }
    \%fname2info;
}

my %ssh;
for my $host ($left_host, $right_host) {
    if ($host ne '__local__') {
	my $ssh = Net::OpenSSH->new($host);
	$ssh->error and die "ERROR: while trying to ssh-connect to $host: " . $ssh->error;
	$ssh{$host} = $ssh;
    }
}

for my $def (
	     [$left_host,  \$left_fname2info,  0],
	     [$right_host, \$right_fname2info, defined $right_dir],
	    ) {
    my($host, $fname2info_ref, $need_right_dir_mapping) = @$def;
    my $ssh = $ssh{$host};
    my @extra_fname2info_args = $need_right_dir_mapping ? [$dirs[0], $right_dir] : ();
    my @use_dirs              = $need_right_dir_mapping ? ($right_dir) : @dirs;
    if (!$ssh) {
	my @cmd = (@cmd_without_dirs, @use_dirs);
	open my $fh, '-|', @cmd or die "ERROR: running '@cmd' failed: $!";
	$$fname2info_ref = get_fname2info($fh, @extra_fname2info_args);
	close $fh or die "ERROR: running (or closing) '@cmd' on localhost failed: $!";
    } else {
	my @cmd = (@cmd_without_dirs, @use_dirs);
	my($rout, $pid) = $ssh->pipe_out(@cmd);
	$$fname2info_ref = get_fname2info($rout, @extra_fname2info_args);
	close $rout or die "ERROR: running (or closing) '@cmd' on $host failed: $!";
    }
    if ($debug) {
	warn "DEBUG: Found " . scalar(keys %$$fname2info_ref) . " file(s) on $host\n";
    }
}

my($left_tmp, $right_tmp);
sub get_tmp {
    require File::Temp;
    my(undef,$tmpfile) = File::Temp::tempfile(UNLINK => 1, SUFFIX => "rdiffr_XXXXXXXX");
    $tmpfile;
}

my($left_md5_method, $right_md5_method);

my @left_fnames  = sort keys %$left_fname2info;
my @right_fnames = sort keys %$right_fname2info;
my $left_fnames_i = my $right_fnames_i = 0;
while($left_fnames_i <= $#left_fnames || $right_fnames_i <= $#right_fnames) {
    if ($debug >= 2) {
	warn "DEBUG: $left_fnames[$left_fnames_i] <=> $right_fnames[$right_fnames_i]\n";
    }
    if      ($left_fnames_i > $#left_fnames) {
	print "Only on $right_host: $right_fnames[$right_fnames_i]\n";
	$right_fnames_i++;
    } elsif ($right_fnames_i > $#right_fnames) {
	print "Only on $left_host: $left_fnames[$left_fnames_i]\n";
	$left_fnames_i++;
    } else {
	my $left_fname = $left_fnames[$left_fnames_i];
	my $right_fname = $right_fnames[$right_fnames_i];
	my $cmp = $left_fname cmp $right_fname;
	if ($cmp < 0) {
	    print "Only on $left_host: $left_fname\n";
	    $left_fnames_i++;
	} elsif ($cmp > 0) {
	    print "Only on $right_host: $right_fname\n";
	    $right_fnames_i++;
	} else {
	    my @diffs;
	    my $content_diff;
	    my $left_info = $left_fname2info->{$left_fname};
	    my $right_info = $right_fname2info->{$right_fname};
	    if ($debug >= 2) {
		print STDERR "DEBUG: " . Data::Dumper->new([$left_info, $right_info],[qw(left_info right_info)])->Indent(1)->Useqq(1)->Sortkeys(1)->Terse(1)->Dump;
	    }
	    if      ($left_info->{mode} != $right_info->{mode}) {
		push @diffs, sprintf "mode: %o vs. %o", $left_info->{mode}, $right_info->{mode};
	    } elsif ($left_info->{user} ne $right_info->{user}) {
		push @diffs, "user: $left_info->{user} vs. $right_info->{user}";
	    } elsif ($left_info->{group} ne $right_info->{group}) {
		push @diffs, "group: $left_info->{group} vs. $right_info->{group}";
	    } elsif ($left_info->{symlinkval} ne $right_info->{symlinkval}) {
		push @diffs, "symlink target: $left_info->{symlinkval} vs. $right_info->{symlinkval}";
	    } else {
		my $has_diffs = $left_info->{size} != $right_info->{size};
		if ($has_diffs) {
		    push @diffs, "size: $left_info->{size} vs. $right_info->{size}";
		} else {
		    if ($md5_check && $left_info->{type} eq 'f' && $right_info->{type} eq 'f') {
			my($left_md5, $right_md5);
			for my $def (
			             [$left_host,  \$left_md5_method,  $left_fname,  \$left_md5],
				     [$right_host, \$right_md5_method, $right_fname, \$right_md5],
				    ) {
			    my($host, $md5_method_ref, $fname, $md5_ref) = @$def;

			    # Find a suitable md5 command
			    if (!$$md5_method_ref) {
				$ssh{$host}->system({stderr_discard=>1,stdout_discard=>1}, 'which', 'md5sum'); # e.g. linux
				if ($? == 0) {
				    $$md5_method_ref = sub {
					my($ssh, $file) = @_;
					my $res = $ssh->capture(($always_sudo ? 'sudo' : ()), 'md5sum', $file);
					die "Error while getting MD5 for '$file' using md5sum" if $? != 0;
					(split / /, $res)[0];
				    };
				    if ($debug) {
					warn "DEBUG: use md5sum on $host for MD5 fingerprints\n";
				    }
				}
			    }
			    if (!$$md5_method_ref) {
				$ssh{$host}->system({stderr_discard=>1,stdout_discard=>1}, 'which', 'md5'); # e.g. freebsd
				if ($? == 0) {
				    $$md5_method_ref = sub {
					my($ssh, $file) = @_;
					my $res = $ssh->capture(($always_sudo ? 'sudo' : ()), 'md5', '-q', $file);
					die "Error while getting MD5 for '$file' using md5" if $? != 0;
					chomp $res;
					$res;
				    };
				    if ($debug) {
					warn "DEBUG: use md5 on $host for MD5 fingerprints\n";
				    }
				}
			    }
			    if (!$$md5_method_ref) {
				# last fallback; we assume that perl and standard perl modules (Digest::MD5) are installed
				$$md5_method_ref = sub {
				    my($ssh, $file) = @_;
				    my $res = $ssh->capture(($always_sudo ? 'sudo' : ()), 'perl', '-MDigest::MD5', '-e', 'open $fh, "<", shift or die $!; $ctx = Digest::MD5->new; $ctx->addfile($fh); print $ctx->hexdigest', $file);
				    die "Error while getting MD5 for '$file' using perl and Digest::MD5" if $? != 0;
				    $res;
				};
				if ($debug) {
				    warn "DEBUG: use perl + Digest::MD5 on $host for MD5 fingerprints\n";
				}
			    }

			    $$md5_ref = $$md5_method_ref->($ssh{$host}, $fname);
			}

			$has_diffs = $left_md5 ne $right_md5;
			if ($has_diffs) {
			    push @diffs, "MD5: $left_md5 vs. $right_md5";
			}
		    }
		}
		if ($has_diffs) {
		    my($left_cmp_file, $right_cmp_file);
		    for my $def (
			         [$left_host, \$left_tmp, \$left_cmp_file],
				 [$right_host, \$right_tmp, \$right_cmp_file],
			        ) {
			my($host, $tmp_ref, $cmp_file_ref) = @$def;
			if ($ssh{$host}) {
			    if (!defined $$tmp_ref) {
				$$tmp_ref = get_tmp();
			    }
			    my @cmd = ("cat", $left_fname);
			    $ssh{$host}->system('test', '-r', $left_fname);
			    if ($? != 0) {
				unshift @cmd, 'sudo';
			    }
			    warn "DEBUG: Read on $host: @cmd...\n" if $debug;
			    my($rout, $pid) = $ssh{$host}->pipe_out(@cmd);
			    open my $ofh, ">", $$tmp_ref
				or die "ERROR: can't write to $$tmp_ref: $!";
			    {
				local $/ = \4096;
				while(<$rout>) {
				    print $ofh $_;
				}
			    }
			    if (!close $rout) {
				print $ofh "ERROR: while closing 'cat $left_fname' pipe on '$host': $!\n";
			    }
			    close $ofh
				or die "ERROR: closing $$tmp_ref failed: $!";
			    $$cmp_file_ref = $$tmp_ref;
			} else {
			    $$cmp_file_ref = $left_fname;
			}
		    }
		    {
			my @cmd = ('diff', @diffopts, $left_cmp_file, $right_cmp_file);
			open my $fh, '-|', @cmd
			    or die "ERROR: running '@cmd' failed: $!";
			if (eof $fh) {
			    # no diffs --- may happen if e.g. -b -B is specified
			} else {
			    my $first_line = <$fh>;
			    if ($first_line =~ m{^---}) {
				scalar <$fh>; # overread also 2nd line
				$content_diff .= "--- $left_host: $left_fname\n";
				$content_diff .= "+++ $right_host: $right_fname\n";
			    } else {
				$content_diff .= $first_line; # XXX can this happen? binary files?
			    }
			    {
				local $/ = \4096;
				while(<$fh>) {
				    $content_diff .= $_;
				}
			    }
			    if ($content_diff !~ /\n\z/) { # XXX can this ever happen?
				$content_diff .= "\n";
			    }
			}
		    }
		}
	    }
	    if (@diffs) {
		# XXX formatting?
		print "$left_fname\n";
		for my $diff (@diffs) {
		    print "  $diff\n";
		}
		if (defined $content_diff) {
		    # XXX Fix STDOUT: it got a O_NONBLOCK flag
		    # during one of the pipe_out() handlings
		    # above. This must be undone, otherwise
		    # the next print() may fail with an (for
		    # perl) unexpected EAGAIN
		    #
		    # See https://rt.cpan.org/Ticket/Display.html?id=125210
		    {
			use Fcntl qw(F_GETFL F_SETFL O_NONBLOCK);
			my $flags = fcntl(STDOUT, F_GETFL, 0) or die $!;
			fcntl(STDOUT, F_SETFL, $flags & ~O_NONBLOCK) or die $!;
		    }
		    print $content_diff
			or warn "ERROR: while printing diff content: $!";
		}
	    }
	    $left_fnames_i++;
	    $right_fnames_i++;
	}
    }
}
print "DEBUG: Finished.\n" if $debug; # not to stderr, so it's printed last
clean_finish();

my $clean_finish;
sub clean_finish {
    $clean_finish = 1;
    exit;
}

END {
    if (!$clean_finish) {
	warn "ERROR: rdiffr crashed somewhere; output may be cropped!\n";
    }
}

# Third pass: output differences. Sort files alphabetically. Output
# also stat diffs, maybe git-like. Fetch contents for files with
# different content, and run this through diff -u. Maybe don't fetch
# for binary content.

# Questions: optionally cache things?

# XXX There should also be a mode where directories are differently
# named on left and right system. In this case, maybe work only with
# relative filenames; also maybe don't support multiple directories.

# XXX make it possible to use sudo, additionally

__END__

=head1 NAME

rdiffr - remote diff, recursive

=head1 SYNOPSIS

Run diff between two remote hosts, using ssh, on a number of
directories:

   rdiffr user@host1.example.org user@host2.example.org /etc /usr/local/etc ...

Run diff between the local system and a remote host:

   rdiffr __local__ user@host1.example.org /etc /usr/local/etc ...

If top directory paths differ on both hosts, then use C<--right-dir>
to specify the top directory on the right one. Note that in this mode
it's possible to specifiy only one directory at all:

   rdiffr user@host1.example.org user@host2.example.org /mnt/home --right-dir /export/home

To exclude files or paths from comparisons it's possible to use
C<--exclude> or C<--exclude-path-rx>. C<--exclude> expects a full file
basename, while C<--exclude-path-rx> does anchored regexp matches on
the whole path. "Anchored regexp" means that C<^> and C<$> are
implicitly added to the regexp to the front resp. the end. Both
exclude options may be combined and used multiple times.

   rdiffr user@host1.example.org user@host2.example.org /dir --exclude-path-rx '.*/logs/.*'

=head2 OPTIONS

Further options:

=over

=item C<--debug|-d>

Enable debugging. May be given multiple times for more debugging.

=item C<--always-sudo>

Run all remote commands with sudo, especially the initial find call.

=item C<--no-md5-check>

As an optimization, don't do any MD5 checks, but rely only on file
size. Obviously this could go wrong.

=item C<--version|-v>

Output version of script.

=back

=head1 REQUIREMENTS

This script needs perl and the CPAN module L<Net::OpenSSH>. The latter
may be installed on Debian-like systems using

    apt-get install libnet-openssh-perl

=head1 AUTHOR

Slaven Rezic

=cut
