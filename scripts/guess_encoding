#!/usr/bin/perl -w
# -*- perl -*-

#
# Author: Slaven Rezic
#
# Copyright (C) 2007,2009,2012 Slaven Rezic. All rights reserved.
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl itself.
#
# Mail: slaven@rezic.de
# WWW:  http://www.rezic.de/eserte/
#

######################################################################
# No user-servicable parts below this point.

use strict;
use Getopt::Long;
use Encode;

my %expected_codepoints_groups = (
				  space     => [9, 10, 13], # newlines+tab
				  ascii     => [32..127],
				  german    => [map { ord } split //, "äöüÄÖÜß"],
				  eurosign  => [0x20ac],
				  hiragana  => [0x3040..0x309f],
				  katakana  => [0x30a0..0x30ff],
				  cjk_ext_a => [0x3400..0x4DB5], # CJK Unified Ideographs Extension A
				  cjk       => [0x4E00..0x9fc3], # CJK Unified Ideographs
				  hebrew    => [0x0590..0x5ff],
				 );

# Which are the expected encodings? May be empty, in this case
# all to perl available encodings will be checked.
#my @expected_encodings = qw(cp1252 iso-8859-1 utf-8 iso-8859-15);
my @expected_encodings;

my @expected_codepoints_groups;
GetOptions(
	   "encodings=s{1,}" => \@expected_encodings,
	   "codepoints=s{1,}" => \@expected_codepoints_groups,
	  ) or die <<EOF;
usage: $0 --codepoints ... ... -- file
EOF

if (!@expected_codepoints_groups) {
    die <<EOF
Please specify at least codepoint group with --codepoints
Available groups are: @{[ join(" ", keys %expected_codepoints_groups) ]}
EOF
}

my @expected_codepoints;
{
    my @unknown_codepoints_groups;
    for my $expected_codepoints_group (@expected_codepoints_groups) {
	if (!exists $expected_codepoints_groups{$expected_codepoints_group}) {
	    push @unknown_codepoints_groups, $expected_codepoints_group;
	} else {
	    push @expected_codepoints, @{$expected_codepoints_groups{$expected_codepoints_group}};
	}
    }
    if (@unknown_codepoints_groups) {
	die <<EOF;
Unknown codepoint group(s) specified: @unknown_codepoints_groups
EOF
    }
}

my $file = shift
    or die "Specify the file containing the octets to analyze";
my $octets_to_analyze = do { open my $fh, $file or die "Cannot open file '$file': $!"; local $/; <$fh> };

if (!@expected_encodings) {
    @expected_encodings = Encode->encodings(":all");
}
my %expected_codepoints = map {($_,1)} @expected_codepoints;
my @encoding_result;

for my $encoding (@expected_encodings) {
    my $characters = eval {
	decode($encoding, $octets_to_analyze, Encode::FB_CROAK|Encode::LEAVE_SRC);
    };
    if (!$@) {
	my %got_codepoints;
	for my $codepoint (map { ord } split //, $characters) {
	    $got_codepoints{$codepoint}++;
	}
	my $fitting_codepoints = 0;
	while(my($k,$v) = each %got_codepoints) {
	    if (exists $expected_codepoints{$k}) {
		$fitting_codepoints++;
	    }
	}
	if (keys %got_codepoints) {
	    push @encoding_result, [$encoding, $fitting_codepoints*100/keys %got_codepoints];
	}
    }
}

@encoding_result = sort { $b->[1] <=> $a->[1] } @encoding_result;
for my $result (@encoding_result) {
    printf "%-30s: %4.1f%%\n", $result->[0], $result->[1];
}

__END__
