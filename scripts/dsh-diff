#!/usr/bin/perl
#
# Copyright (C) 2014 Slaven Rezic. All rights reserved.
# This package is free software; you can redistribute it and/or
# modify it under the same terms as Perl itself.

use strict;
use warnings;
our $VERSION = 0.003;

use File::Temp qw(tempfile);
use Getopt::Long;
use IPC::Run qw(run);

my $default_jobs_for_c = 20;

my(@dsh_files, @dsh_groups, @hosts, $reference_host, @use_normalizer, $jobs);
Getopt::Long::Configure("bundling_override");
GetOptions('f=s@' => \@dsh_files,
	   'g=s@' => \@dsh_groups,
	   'j=i' => \$jobs,
	   "c" => sub {
	       $jobs = $default_jobs_for_c;
	   },
           'm|h|host=s@' => \@hosts,
	   "ref|reference=s" => \$reference_host,
	   'normalizer=s@' => sub {
	       push @use_normalizer, split /,/, $_[1];
	   },
	  )
    or die "usage?";
@ARGV == 1 or die "usage? Need exactly one file to diff!";
my $file_to_diff = shift @ARGV;

my $pfm;
if (defined $jobs) {
    require Parallel::ForkManager;
    Parallel::ForkManager->VERSION('0.7.6'); # for data retrieval
    $pfm = Parallel::ForkManager->new($jobs);
    $pfm->run_on_finish
	(
	 sub {
	     my($pid, $exit_code, $ident, $exit_signal, $core_dump, $data_structure_reference) = @_;
	     if ($exit_code == 0) {
		 my $other_host = $ident;
		 print_separator($other_host);
		 if (!$data_structure_reference) {
		     die "No data structure returned --- too old Parallel::ForkManager, or another problem? (ident=$ident)";
		 }
		 my $diff = $data_structure_reference->{diff};
		 if (defined $diff) { # is undef if there are no differences
		     print $diff;
		 }
	     }
	 }
	);
}

my $normalizer;
if (@use_normalizer) {
    my $code = <<'EOF';
sub {
    my $s = shift;
    my @s = split /\n/, $s;
EOF
    for my $normalizer (@use_normalizer) {
	my $sub = 'normalizer_' . $normalizer;
	if (!defined &$sub) {
	    die "Normalizer '$normalizer' does not exist";
	}
	$code .= '@s = ' . $sub . '(@s);' . "\n";
    }
    $code .= <<'EOF';
    join "\n", @s;
}
EOF
    $normalizer = eval $code;
    if (!$normalizer) {
	die "Compilation of '$code' failed: $@";
    }
}

my(@other_hosts);
if (@dsh_groups) {
    for my $dsh_group (@dsh_groups) {
        push @dsh_files, "$ENV{HOME}/.dsh/group/$dsh_group";
    }
}
if (@dsh_files) {
    for my $dsh_file (@dsh_files) {
        open my $fh, $dsh_file
            or die "Can't open $dsh_file: $!";
        while(<$fh>) {
            chomp;
            push @other_hosts, $_;
        }
    }
}
push @other_hosts, @hosts;
if (!defined $reference_host) {
    $reference_host = shift @other_hosts;
} else {
    @other_hosts = grep { $_ ne $reference_host } @other_hosts;
}

if (!@other_hosts) {
    die "Other hosts are empty. Did you specify -f, -g, or -h?";
}
if (!$reference_host) {
    die "Cannot find a first host, maybe the group file @dsh_files is empty?";
}

my($tmp2fh,$principal_file) = tempfile(UNLINK => 1)
    or die $!;
my @cmd = ("ssh", "-o", "ClearAllForwardings=yes", $reference_host, "cat $file_to_diff");
open my $sshfh, "-|", @cmd
    or die $!;
while(<$sshfh>) {
    print $tmp2fh $_;
}
close $sshfh
    or die "While running '@cmd': $?";
close $tmp2fh
    or die $!;

if ($normalizer) {
    my $buf = $normalizer->(do { open my $fh, $principal_file or die $!; local $/; <$fh> });
    open my $ofh, ">", $principal_file or die $!;
    print $ofh $buf;
    close $ofh or die $!;
}

print_separator("$reference_host (reference)");

for my $other_host (@other_hosts) {
    if ($pfm) {
	$pfm->start($other_host) and next;
    } else {
	print_separator($other_host);
    }
    my @ssh_base_cmd = ("ssh", "-o", "ClearAllForwardings=yes", $other_host);
    if ($normalizer) {
	my($tmp3fh,$remote_file) = tempfile(UNLINK => 1, SUFFIX => "_$other_host.tmp")
	    or die "Can't create temporary file: $!";
	my @cmd = (@ssh_base_cmd, "cat", $file_to_diff);
	my $buf;
	my $success = run [@cmd], ">", \$buf;
	if (!$success) {
	    my $errmsg = "Error while fetching $file_to_diff from $other_host";
	    if ($pfm) {
		$pfm->finish(0, { diff => $errmsg });
	    } else {
		warn $errmsg;
	    }
	} else {
	    print $tmp3fh $normalizer->($buf);
	    close $tmp3fh
		or die "Error while writing to temporary file '$remote_file'";
	    my @diff_cmd = ("diff", "-u", $remote_file, $principal_file);
	    if ($pfm) {
		my $diff;
		run [@diff_cmd], ">", \$diff; # no success check here, diff returns non-zero on diffs
		$pfm->finish(0, {diff => $diff});
	    } else {
		system @diff_cmd; # no success check here, diff returns non-zero on diffs
	    }
	}
    } else {
	my @remote_diff_cmd = (@ssh_base_cmd, "diff -u - $file_to_diff");
	if ($pfm) {
	    my $diff;
	    run [@remote_diff_cmd], "<", $principal_file, ">", \$diff; # no success check here, diff returns non-zero on diffs
	    $pfm->finish(0, {diff => $diff});
	} else {
	    run [@remote_diff_cmd], "<", $principal_file; # no success check here, diff returns non-zero on diffs
	}
    }
}

if ($pfm) {
    $pfm->wait_all_children;
}

sub normalizer_sort {
    my(@s) = @_;
    sort @s;
}

sub normalizer_removecomments {
    my(@s) = @_;
    grep { !/^\s*#/ } @s;
}

sub normalizer_removeemptylines {
    my(@s) = @_;
    grep { !/^\s*$/ } @s;
}

sub normalizer_rcskeywords {
    my(@s) = @_;
    grep { !/\$(?:HeadURL|Id):/ } @s;
}

sub print_separator {
    my($other_host) = @_;
    print "="x70, "\n";
    print "=== $other_host\n";
}

__END__

=head1 NAME

dsh-diff - make a diff over multiple hosts

=head1 AUTHOR

Slaven Rezic <srezic@cpan.org>

=cut
