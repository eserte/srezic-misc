#!/usr/bin/env perl

use strict;
use warnings;
use File::Basename qw(basename);
use File::Glob qw(bsd_glob);
use Getopt::Long;
use Term::ANSIColor;

sub check_ci ($@);
sub debug ($);
sub guess_project_from_git ();

sub usage () {
    die "usage: $0 [--debug] [--travis] [--appveyor] [--github-actions [--use-gh|--no-use-gh]] [--commit SHA1] [--wait seconds] [--timeout seconds] user/repo\n";
}

my $debug;
my $check_travis;
my $check_appveyor;
my $check_github_actions;
my $commit;
my $wait_seconds = 15;
my $timeout = 10;
my $github_api_limit_seconds = 60; # do at most one request per minute because of rate limiting
my $use_travis_v3 = 1;
my $use_gh = undef; # undef mean: maybe
GetOptions(
	   "d|debug" => \$debug,
	   "travis!" => \$check_travis,
	   "appveyor!" => \$check_appveyor,
	   "github-actions!" => \$check_github_actions,
	   "commit=s" => \$commit,
	   "wait=i" => \$wait_seconds,
	   "t|timeout=i" => \$timeout,
	   "use-gh!" => \$use_gh,
	  )
    or usage;
my $repo = shift || guess_project_from_git
    or usage;
if (!$check_travis && !$check_appveyor && !$check_github_actions) {
    # guess from script name
    my $basename = basename($0);
    if ($basename =~ /travis/) {
	$check_travis = 1;
    } elsif ($basename =~ /appveyor/) {
	$check_appveyor = 1;
    } elsif ($basename =~ /github.actions/) {
	$check_github_actions = 1;
    } else {
	# for "check-ci" or something else: check both if appropriate files exist
	chomp(my $rootdir = `git rev-parse --show-toplevel`);
	$check_travis   = -f "$rootdir/.travis.yml";
	$check_appveyor = -f "$rootdir/appveyor.yml" || -f "$rootdir/.appveyor.yml";
	$check_github_actions = -d "$rootdir/.github/workflows" && bsd_glob("$rootdir/.github/workflows/*");
    }
}

if (!$check_travis && !$check_appveyor && !$check_github_actions) {
    die "No CI system detected.\n";
}

if ($check_github_actions && !defined $use_gh) {
    $use_gh = is_in_path('gh') ? 1 : 0;
}

my $success = check_ci $repo, commit => $commit, wait => $wait_seconds;
exit($success ? 0 : 1);

{
    # initially taken from deployment.pl in CPAN-Testers-Matrix

    sub check_ci ($@) {
	my($repo,%opts) = @_;
	my $current_commit_id = delete $opts{commit};
	my $wait_seconds      = delete $opts{wait} || 15;
	die "Unhandled options: " . join(" ", %opts) if %opts;

	if (!defined $current_commit_id) {
	    chomp($current_commit_id = `git log -1 --format=format:'%H'`);
	    if (!$current_commit_id) {
		die "Unexpected: cannot find a commit";
	    }
	}

	require LWP::UserAgent;
	require JSON::XS;
	require URI::Escape;
	my $ua = LWP::UserAgent->new(timeout => $timeout, keep_alive => 1);
	my $wait = sub {
	    for (reverse(0..$wait_seconds-1)) {
		print STDERR "\rwait $_ second" . ($_ != 1 ? "s " : "  ");
		sleep 1 if $_ > 0;
	    }
	    print STDERR "\r";
	};

	my %is_active = (
			 "travis"         => $check_travis,
			 "appveyor"       => $check_appveyor,
			 "github actions" => $check_github_actions,
			);
	my %is_failed;
	my $mark_as_failed = sub ($$) {
	    my($system, $error) = @_;
	    $is_active{$system} = 0;
	    $is_failed{$system} = 1;
	    print STDERR colored($error, "red"), "\n";
	    undef;
	};
	my $mark_as_finished = sub ($) {
	    my($system) = @_;
	    $is_active{$system} = 0;
	};

	######################################################################
	# Github Actions
	my $last_github_api_access;
	my $do_github_api_call = sub ($@) {
	    my($rel_api_url, %opts) = @_;
	    my $do_rate_check = delete $opts{do_rate_check};
	    die "Unhandled options: " . join(" ", %opts) if %opts;

	    my $json;
	    if ($use_gh) {
		my @cmd = ('gh', 'api', $rel_api_url);
		debug "About to run '@cmd'";
		open my $fh, '-|', @cmd
		    or do {
			$mark_as_failed->('github actions', "Error running '@cmd': $!");
			return;
		    };
		local $/;
		$json = <$fh>;
		close $fh
		    or do {
			$mark_as_failed->('github actions', "Error running '@cmd': $!");
			return;
		    };
		debug "Fetch from github actions via gh successful";
	    } else {
		if (defined $last_github_api_access && time < $last_github_api_access + $github_api_limit_seconds) {
		    debug "Limit accesses against github API to avoid rate limit errors";
		    return undef;
		}
		my $url = "https://api.github.com/$rel_api_url";
		debug "About to get from $url";
		my $res = $ua->get($url, Accept => 'application/vnd.github.v3+json');
		# Theoretically, this request should also be used to set $last_github_api_access, but it's called only once per script run...
		if ($do_rate_check && $res->code == 403 && $res->status_line =~ /rate limit exceeded/i) {
		    debug "Rate limit exceeded while fetching from github actions";
		    return undef;
		} elsif (!$res->is_success) {
		    $mark_as_failed->('github actions', "Request to $url failed: " . $res->status_line);
		}
		debug "Fetch from github actions successful";
		$json = $res->decoded_content(charset => 'none');
	    }
	    return JSON::XS::decode_json($json);
	};
	my $get_current_github_actions_run_id = sub {
	    my $data = $do_github_api_call->("repos/$repo/actions/runs");
	    for my $workflow_run (@{ $data->{workflow_runs} || [] }) {
		if ($workflow_run->{'head_sha'} eq $current_commit_id) {
		    return $workflow_run->{'id'};
		}
	    }
	    debug "Workflow run for commit $current_commit_id not found at github actions";
	    undef;
	};
	my $get_current_github_actions_run = sub {
	    my($run_id) = @_;
	    my $run_data = $do_github_api_call->("repos/$repo/actions/runs/$run_id");
	    return $run_data;
	};
	my $get_current_github_actions_jobs = sub {
	    my($run_id) = @_;
	    my $jobs_data = $do_github_api_call->("repos/$repo/actions/runs/$run_id/jobs", do_rate_check => 1);
	    return $jobs_data;
	};

	######################################################################
	# Appveyor
	my $appveyor_build_url = "https://ci.appveyor.com/api/projects/$repo";
	my $get_current_appveyor_build = sub {
	    debug "About to get from $appveyor_build_url";
	    my $res = $ua->get($appveyor_build_url);
	    if (!$res->is_success) {
		$mark_as_failed->('appveyor', "Request to $appveyor_build_url failed: " . $res->status_line);
	    }
	    debug "Fetch from appveyor successful";
	    my $data = JSON::XS::decode_json($res->decoded_content(charset => 'none'));
	    if ($data->{build}->{commitId} eq $current_commit_id) {
		return $data->{build};
	    }
	    debug "Build for commit $current_commit_id not found at appveyor";
	    undef;
	};

	######################################################################
	# Travis CI
	my $travis_domain = 'travis-ci.com'; # was travis-ci.org
	my $travis_build_id;
	my $get_current_travis_build_v3 = sub {
	    my $repo_escaped = URI::Escape::uri_escape($repo);
	    my $travis_builds_url = "https://api.$travis_domain/repo/$repo_escaped/builds";
	    debug "About to get from $travis_builds_url";
	    my $res = $ua->get($travis_builds_url, 'Travis-API-Version' => 3);
	    if (!$res->is_success) {
		$mark_as_failed->('travis', "Request to $travis_builds_url failed: " . $res->status_line);
	    }
	    debug "Fetch from travis successful";
	    my $data = JSON::XS::decode_json($res->decoded_content(charset => 'none'));
	    for my $build (@{ $data->{builds} }) {
		if ($build->{commit}->{sha} eq $current_commit_id) {
		    return $build;
		}
	    }
	    debug "Build for commit $current_commit_id not found at travis";
	    undef;
	};
	my $get_current_travis_build_v2 = sub {
	    my $travis_builds_url = "http://api.$travis_domain/repos/$repo/builds";
	    debug "About to get from $travis_builds_url";
	    my $res = $ua->get($travis_builds_url);
	    if (!$res->is_success) {
		$mark_as_failed->('travis', "Request to $travis_builds_url failed: " . $res->status_line);
	    }
	    debug "Fetch from travis successful";
	    my $data = JSON::XS::decode_json($res->decoded_content(charset => 'none'));
	    for my $build (@$data) {
		if ($build->{commit} eq $current_commit_id) {
		    return $build;
		}
	    }
	    debug "Build for commit $current_commit_id not found at travis";
	    undef;
	};
	my $get_current_travis_build_by_id_v3 = sub {
	    my $travis_build_url = "https://api.$travis_domain/build/$travis_build_id";
	    debug "About to get from $travis_build_url";
	    my $res = $ua->get($travis_build_url, 'Travis-API-Version' => 3);
	    if (!$res->is_success) {
		die "Request to $travis_build_url failed: " . $res->status_line;
	    }
	    debug "Fetch successful";
	    my $data = JSON::XS::decode_json($res->decoded_content(charset => 'none'));
	    return $data;
	};
	my $get_current_travis_build_by_id_v2 = sub {
	    my $travis_build_url = "http://api.$travis_domain/repos/$repo/builds/$travis_build_id";
	    debug "About to get from $travis_build_url";
	    my $res = $ua->get($travis_build_url);
	    if (!$res->is_success) {
		die "Request to $travis_build_url failed: " . $res->status_line;
	    }
	    debug "Fetch successful";
	    my $data = JSON::XS::decode_json($res->decoded_content(charset => 'none'));
	    return $data;
	};
	my $get_travis_job_v3 = sub {
	    my($job_id) = @_;
	    my $travis_job_url = "https://api.$travis_domain/job/$job_id";
	    debug "About to get from $travis_job_url";
	    my $res = $ua->get($travis_job_url, 'Travis-API-Version' => 3);
	    if (!$res->is_success) {
		die "Request to $travis_job_url failed: " . $res->status_line;
	    }
	    debug "Fetch successful";
	    my $data = JSON::XS::decode_json($res->decoded_content(charset => 'none'));
	    return $data;
	};

	######################################################################

	my $maybe_colored = sub {
	    my($title, $number, $color) = @_;
	    my $msg = "$title=$number";
	    if ($number == 0) {
		$msg;
	    } else {
		colored($msg, $color);
	    }		    
	};

	my $github_actions_run_id;

	while () {
	DO_TRAVIS: {
		if ($is_active{travis}) {
		    if (!$travis_build_id) {
			my $travis_build = $use_travis_v3 ? $get_current_travis_build_v3->() : $get_current_travis_build_v2->();
			if (!$travis_build) {
			    if (!$is_failed{travis}) {
				print STDERR "Status at travis:         cannot find commit $current_commit_id\n";
			    }
			    last DO_TRAVIS;
			} else {
			    $travis_build_id = $travis_build->{id};
			    if (!defined $travis_build_id) {
				$mark_as_failed->("Unexpected: no build id found in build data");
				require Data::Dumper;
				warn Data::Dumper::Dumper($travis_build);
				last DO_TRAVIS;
			    }
			}
		    }
		    my $travis_build = $use_travis_v3 ? $get_current_travis_build_by_id_v3->() : $get_current_travis_build_by_id_v3->();
		    if ($travis_build) {
			my $successful = 0;
			my $failures = 0;
			my $running = 0;
			if ($use_travis_v3) {
			    for my $job (@{ $travis_build->{jobs} }) {
				my $job_data = $get_travis_job_v3->($job->{id});
				if (!defined $job_data->{finished_at}) {
				    $running++;
				} elsif (defined $job_data->{state} && $job_data->{state} eq 'passed') {
				    $successful++;
				} else {
				    $failures++;
				}
			    }
			} else {
			    for my $job (@{ $travis_build->{matrix} }) {
				if (!defined $job->{finished_at}) {
				    $running++;
				} elsif (defined $job->{result} && $job->{result} == 0) {
				    $successful++;
				} else {
				    $failures++;
				}
			    }
			}
			print STDERR "Status at travis:         ".
			    $maybe_colored->("running",    $running,    "yellow")." ".
			    $maybe_colored->("successful", $successful, "green")." ".
			    $maybe_colored->("failures",   $failures,   "red")."\n";
			if ($failures) {
			    $mark_as_failed->('travis', "At least one job failed. See https://$travis_domain/$repo for more information.");
			} elsif ($running == 0) {
			    $mark_as_finished->('travis');
			}
		    }
		}
	    }

	DO_APPVEYOR: {
		if ($is_active{appveyor}) {
		    my $appveyor_build = $get_current_appveyor_build->();
		    if (!$appveyor_build) {
			if (!$is_failed{appveyor}) {
			    print STDERR "Status at appveyor:       cannot find commit $current_commit_id\n";
			}
			last DO_APPVEYOR;
		    } else {
			my $successful = 0;
			my $failures = 0;
			my $running = 0;
			for my $job (@{ $appveyor_build->{jobs} }) {
			    if (!$job->{finished}) {
				$running++;
			    } elsif ($job->{status} eq 'success') {
				$successful++;
			    } else {
				$failures++;
			    }
			}
			print STDERR "Status at appveyor:       ".
			    $maybe_colored->("running",    $running,    "yellow")." ".
			    $maybe_colored->("successful", $successful, "green")." ".
			    $maybe_colored->("failures",   $failures,   "red")."\n";
			if ($failures) {
			    $mark_as_failed->('appveyor', "At least one job failed. See https://ci.appveyor.com/project/$repo for more information.");
			} elsif ($running == 0) {
			    $mark_as_finished->('appveyor');
			}
		    }
		}
	    }

	DO_GITHUB_ACTIONS: {
		if ($is_active{"github actions"}) {
		    if (!$github_actions_run_id) {
			$github_actions_run_id = $get_current_github_actions_run_id->();
		    }
		    if (!$github_actions_run_id) {
			if (!$is_failed{"github actions"}) {
			    print STDERR "Status at github actions: cannot find $current_commit_id\n";
			}
			last DO_GITHUB_ACTIONS;
		    } else {
			my $jobs_data = $get_current_github_actions_jobs->($github_actions_run_id);
			if (!$jobs_data) {
			    print STDERR "Status at github actions: unknown\n"; # maybe 403 rate limit exceeded
			    last DO_GITHUB_ACTIONS;
			}
			my $successful = 0;
			my $failures = 0;
			my $running = 0;
			for my $job (@{ $jobs_data->{jobs} || [] }) {
			    if ($job->{status} ne 'completed') {
				$running++;
			    } elsif ($job->{conclusion} eq 'success') {
				$successful++;
			    } else {
				$failures++;
			    }
			}
			my $run_completed;
			if ($running) {
			    $run_completed = 0;
			} else {
			    my $run_data = $get_current_github_actions_run->($github_actions_run_id);
			    if (!$run_data) {
				# Don't know, maybe 403 rate limit exceeded, assume not completed
				$run_completed = 0;
			    } else {
				my $run_status = $run_data->{status}||'';
				if ($run_status eq 'completed') {
				    $run_completed = 1;
				} elsif ($run_status eq 'in_progress') {
				    $run_completed = 0;
				} else {
				    warn "Unknown run status '$run_data->{status}', assume completed.\n";
				    $run_completed = 1;
				}
			    }
			}
			print STDERR "Status at github actions: " .
			    $maybe_colored->("running",    $running,    "yellow")." ".
			    $maybe_colored->("successful", $successful, "green")." ".
			    $maybe_colored->("failures",   $failures,   "red")."\n";
			if ($failures) {
			    $mark_as_failed->('github actions', "At least one job failed. See https://github.com/$repo/actions for more information.");
			} elsif ($run_completed) {
			    $mark_as_finished->('github actions');
			}
		    }
		}
	    }

	    if (!$is_active{travis} && !$is_active{appveyor} && !$is_active{'github actions'}) {
		last;
	    }

	    $wait->();
	}

	if ($check_travis && !$is_failed{travis}) {
	    print STDERR "travis-ci build was " . colored("successful", "green") . "\n";
	}
	if ($check_appveyor && !$is_failed{appveyor}) {
	    print STDERR "appveyor build was " . colored("successful", "green") . "\n";
	}
	if ($check_github_actions && !$is_failed{'github actions'}) {
	    print STDERR "github actions build was " . colored("successful", "green") . "\n";
	}

	return !$is_failed{travis} && !$is_failed{appveyor} && !$is_failed{'github actions'};
    }

    sub debug ($) {
	my $msg = shift;
	if ($debug) {
	    print STDERR "$msg\n";
	}
    }
}

sub guess_project_from_git () {
    # Alternatives:
    # - all git versions:
    #     git config remote.origin.url
    # - newer git only (e.g. 2.11.x):
    #     git remote get-url origin
    chomp(my(@l) = `git remote -v 2>/dev/null`);
    # example: origin  git://github.com/eserte/doit.git (fetch)
    for my $l (@l) {
	if ($l =~ m{^origin\s+(\S+)}) {
	    my $project = $1;
	    $project =~ s{\.git$}{};
	    $project =~ s{^git\@github.com:}{};
	    $project =~ s{.*/([^/]+/[^/]+)$}{$1};
	    return $project if defined $project && length $project;
	}
    }
    warn "Cannot guess project from current directory...\n";
    undef;
}

# REPO BEGIN
# REPO NAME is_in_path /home/slaven_rezic/src/srezic-repository 
# REPO MD5 4be1e368fea0fa9af4e89256a9878820
sub is_in_path {
    my($prog) = @_;
    require File::Spec;
    if (File::Spec->file_name_is_absolute($prog)) {
	if ($^O eq 'MSWin32') {
	    return $prog       if (-f $prog && -x $prog);
	    return "$prog.bat" if (-f "$prog.bat" && -x "$prog.bat");
	    return "$prog.com" if (-f "$prog.com" && -x "$prog.com");
	    return "$prog.exe" if (-f "$prog.exe" && -x "$prog.exe");
	    return "$prog.cmd" if (-f "$prog.cmd" && -x "$prog.cmd");
	} else {
	    return $prog if -f $prog and -x $prog;
	}
    }
    require Config;
    %Config::Config = %Config::Config if 0; # cease -w
    my $sep = $Config::Config{'path_sep'} || ':';
    foreach (split(/$sep/o, $ENV{PATH})) {
	if ($^O eq 'MSWin32') {
	    # maybe use $ENV{PATHEXT} like maybe_command in ExtUtils/MM_Win32.pm?
	    return "$_\\$prog"     if (-f "$_\\$prog" && -x "$_\\$prog");
	    return "$_\\$prog.bat" if (-f "$_\\$prog.bat" && -x "$_\\$prog.bat");
	    return "$_\\$prog.com" if (-f "$_\\$prog.com" && -x "$_\\$prog.com");
	    return "$_\\$prog.exe" if (-f "$_\\$prog.exe" && -x "$_\\$prog.exe");
	    return "$_\\$prog.cmd" if (-f "$_\\$prog.cmd" && -x "$_\\$prog.cmd");
	} else {
	    return "$_/$prog" if (-x "$_/$prog" && !-d "$_/$prog");
	}
    }
    undef;
}
# REPO END

=head1 BUGS

=over

=item Does not handle travis-ci's allow_failures section

Entries in the optional C<allow_failures> are not handled. If a
matching test case fails, then C<check-ci> (or C<check-travis>) marks
the whole build as a failure.

=back

=cut
