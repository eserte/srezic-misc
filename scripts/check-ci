#!/usr/bin/perl

use strict;
use warnings;
use File::Basename qw(basename);
use Getopt::Long;
use Term::ANSIColor;

sub check_ci ($@);
sub debug ($);
sub guess_project_from_git ();

sub usage () {
    die "usage: $0 [--debug] [--travis] [--appveyor] [--commit SHA1] [--wait seconds] user/repo\n";
}

my $debug;
my $check_travis;
my $check_appveyor;
my $commit;
my $wait_seconds = 15;
my $use_travis_v3 = 1;
GetOptions(
	   "d|debug" => \$debug,
	   "travis!" => \$check_travis,
	   "appveyor!" => \$check_appveyor,
	   "commit=s" => \$commit,
	   "wait=i" => \$wait_seconds,
	  )
    or usage;
my $repo = shift || guess_project_from_git
    or usage;
if (!$check_travis && !$check_appveyor) {
    # guess from script name
    my $basename = basename($0);
    if ($basename =~ /travis/) {
	$check_travis = 1;
    } elsif ($basename =~ /appveyor/) {
	$check_appveyor = 1;
    } else {
	# for "check-ci" or something else: check both
	$check_travis = 1;
	$check_appveyor = 1;
    }
}

my $success = check_ci $repo, commit => $commit, wait => $wait_seconds;
exit($success ? 0 : 1);

{
    # initially taken from deployment.pl in CPAN-Testers-Matrix

    sub check_ci ($@) {
	my($repo,%opts) = @_;
	my $current_commit_id = delete $opts{commit};
	my $wait_seconds      = delete $opts{wait} || 15;
	die "Unhandled options: " . join(" ", %opts) if %opts;

	if (!defined $current_commit_id) {
	    chomp($current_commit_id = `git log -1 --format=format:'%H'`);
	    if (!$current_commit_id) {
		die "Unexpected: cannot find a commit";
	    }
	}

	require LWP::UserAgent;
	require JSON::XS;
	require URI::Escape;
	my $ua = LWP::UserAgent->new(timeout => 10, keep_alive => 1);
	my $wait = sub {
	    for (reverse(0..$wait_seconds-1)) {
		print STDERR "\rwait $_ second" . ($_ != 1 ? "s " : "  ");
		sleep 1 if $_ > 0;
	    }
	    print STDERR "\r";
	};

	my %is_active = (
			  travis   => $check_travis,
			  appveyor => $check_appveyor,
			 );
	my %is_failed;
	my $mark_as_failed = sub ($$) {
	    my($system, $error) = @_;
	    $is_active{$system} = 0;
	    $is_failed{$system} = 1;
	    print STDERR colored($error, "red"), "\n";
	    undef;
	};
	my $mark_as_finished = sub ($) {
	    my($system) = @_;
	    $is_active{$system} = 0;
	};

	my $appveyor_build_url = "https://ci.appveyor.com/api/projects/$repo";
	my $get_current_appveyor_build = sub {
	    debug "About to get from $appveyor_build_url";
	    my $res = $ua->get($appveyor_build_url);
	    if (!$res->is_success) {
		$mark_as_failed->('appveyor', "Request to $appveyor_build_url failed: " . $res->status_line);
	    }
	    debug "Fetch from appveyor successful";
	    my $data = JSON::XS::decode_json($res->decoded_content(charset => 'none'));
	    if ($data->{build}->{commitId} eq $current_commit_id) {
		return $data->{build};
	    }
	    debug "Build for commit $current_commit_id not found at appveyor";
	    undef;
	};

	my $travis_build_id;
	my $get_current_travis_build_v3 = sub {
	    my $repo_escaped = URI::Escape::uri_escape($repo);
	    my $travis_builds_url = "https://api.travis-ci.org/repo/$repo_escaped/builds";
	    debug "About to get from $travis_builds_url";
	    my $res = $ua->get($travis_builds_url, 'Travis-API-Version' => 3);
	    if (!$res->is_success) {
		$mark_as_failed->('travis', "Request to $travis_builds_url failed: " . $res->status_line);
	    }
	    debug "Fetch from travis successful";
	    my $data = JSON::XS::decode_json($res->decoded_content(charset => 'none'));
	    for my $build (@{ $data->{builds} }) {
		if ($build->{commit}->{sha} eq $current_commit_id) {
		    return $build;
		}
	    }
	    debug "Build for commit $current_commit_id not found at travis";
	    undef;
	};
	my $get_current_travis_build_v2 = sub {
	    my $travis_builds_url = "http://api.travis-ci.org/repos/$repo/builds";
	    debug "About to get from $travis_builds_url";
	    my $res = $ua->get($travis_builds_url);
	    if (!$res->is_success) {
		$mark_as_failed->('travis', "Request to $travis_builds_url failed: " . $res->status_line);
	    }
	    debug "Fetch from travis successful";
	    my $data = JSON::XS::decode_json($res->decoded_content(charset => 'none'));
	    for my $build (@$data) {
		if ($build->{commit} eq $current_commit_id) {
		    return $build;
		}
	    }
	    debug "Build for commit $current_commit_id not found at travis";
	    undef;
	};
	my $get_current_travis_build_by_id_v3 = sub {
	    my $travis_build_url = "https://api.travis-ci.org/build/$travis_build_id";
	    debug "About to get from $travis_build_url";
	    my $res = $ua->get($travis_build_url, 'Travis-API-Version' => 3);
	    if (!$res->is_success) {
		die "Request to $travis_build_url failed: " . $res->status_line;
	    }
	    debug "Fetch successful";
	    my $data = JSON::XS::decode_json($res->decoded_content(charset => 'none'));
	    return $data;
	};
	my $get_current_travis_build_by_id_v2 = sub {
	    my $travis_build_url = "http://api.travis-ci.org/repos/$repo/builds/$travis_build_id";
	    debug "About to get from $travis_build_url";
	    my $res = $ua->get($travis_build_url);
	    if (!$res->is_success) {
		die "Request to $travis_build_url failed: " . $res->status_line;
	    }
	    debug "Fetch successful";
	    my $data = JSON::XS::decode_json($res->decoded_content(charset => 'none'));
	    return $data;
	};
	my $get_travis_job_v3 = sub {
	    my($job_id) = @_;
	    my $travis_job_url = "https://api.travis-ci.org/job/$job_id";
	    debug "About to get from $travis_job_url";
	    my $res = $ua->get($travis_job_url, 'Travis-API-Version' => 3);
	    if (!$res->is_success) {
		die "Request to $travis_job_url failed: " . $res->status_line;
	    }
	    debug "Fetch successful";
	    my $data = JSON::XS::decode_json($res->decoded_content(charset => 'none'));
	    return $data;
	};

	my $maybe_colored = sub {
	    my($title, $number, $color) = @_;
	    my $msg = "$title=$number";
	    if ($number == 0) {
		$msg;
	    } else {
		colored($msg, $color);
	    }		    
	};

	while () {
	DO_TRAVIS: {
		if ($is_active{travis}) {
		    if (!$travis_build_id) {
			my $travis_build = $use_travis_v3 ? $get_current_travis_build_v3->() : $get_current_travis_build_v2->();
			if (!$travis_build) {
			    if (!$is_failed{travis}) {
				print STDERR "Status at travis:   cannot find commit $current_commit_id\n";
			    }
			    last DO_TRAVIS;
			} else {
			    $travis_build_id = $travis_build->{id};
			    if (!defined $travis_build_id) {
				$mark_as_failed->("Unexpected: no build id found in build data");
				require Data::Dumper;
				warn Data::Dumper::Dumper($travis_build);
				last DO_TRAVIS;
			    }
			}
		    }
		    my $travis_build = $use_travis_v3 ? $get_current_travis_build_by_id_v3->() : $get_current_travis_build_by_id_v3->();
		    if ($travis_build) {
			my $successful = 0;
			my $failures = 0;
			my $running = 0;
			if ($use_travis_v3) {
			    for my $job (@{ $travis_build->{jobs} }) {
				my $job_data = $get_travis_job_v3->($job->{id});
				if (!defined $job_data->{finished_at}) {
				    $running++;
				} elsif (defined $job_data->{state} && $job_data->{state} eq 'passed') {
				    $successful++;
				} else {
				    $failures++;
				}
			    }
			} else {
			    for my $job (@{ $travis_build->{matrix} }) {
				if (!defined $job->{finished_at}) {
				    $running++;
				} elsif (defined $job->{result} && $job->{result} == 0) {
				    $successful++;
				} else {
				    $failures++;
				}
			    }
			}
			print STDERR "Status at travis:   ".
			    $maybe_colored->("running",    $running,    "yellow")." ".
			    $maybe_colored->("successful", $successful, "green")." ".
			    $maybe_colored->("failures",   $failures,   "red")."\n";
			if ($failures) {
			    $mark_as_failed->('travis', "At least one job failed. See https://travis-ci.org/$repo for more information.");
			} elsif ($running == 0) {
			    $mark_as_finished->('travis');
			}
		    }
		}
	    }

	DO_APPVEYOR: {
		if ($is_active{appveyor}) {
		    my $appveyor_build = $get_current_appveyor_build->();
		    if (!$appveyor_build) {
			if (!$is_failed{appveyor}) {
			    print STDERR "Status at appveyor: cannot find commit $current_commit_id\n";
			}
			last DO_APPVEYOR;
		    } else {
			my $successful = 0;
			my $failures = 0;
			my $running = 0;
			for my $job (@{ $appveyor_build->{jobs} }) {
			    if (!$job->{finished}) {
				$running++;
			    } elsif ($job->{status} eq 'success') {
				$successful++;
			    } else {
				$failures++;
			    }
			}
			print STDERR "Status at appveyor: ".
			    $maybe_colored->("running",    $running,    "yellow")." ".
			    $maybe_colored->("successful", $successful, "green")." ".
			    $maybe_colored->("failures",   $failures,   "red")."\n";
			if ($failures) {
			    $mark_as_failed->('appveyor', "At least one job failed. See https://ci.appveyor.com/project/$repo for more information.");
			} elsif ($running == 0) {
			    $mark_as_finished->('appveyor');
			}
		    }
		}
	    }

	    if (!$is_active{travis} && !$is_active{appveyor}) {
		last;
	    }

	    $wait->();
	}

	if ($check_travis && !$is_failed{travis}) {
	    print STDERR "travis-ci build was " . colored("successful", "green") . "\n";
	}
	if ($check_appveyor && !$is_failed{appveyor}) {
	    print STDERR "appveyor build was " . colored("successful", "green") . "\n";
	}

	return !$is_failed{travis} && !$is_failed{appveyor};
    }

    sub debug ($) {
	my $msg = shift;
	if ($debug) {
	    print STDERR "$msg\n";
	}
    }
}

sub guess_project_from_git () {
    # Alternatives:
    # - all git versions:
    #     git config remote.origin.url
    # - newer git only (e.g. 2.11.x):
    #     git remote get-url origin
    chomp(my(@l) = `git remote -v 2>/dev/null`);
    # example: origin  git://github.com/eserte/doit.git (fetch)
    for my $l (@l) {
	if ($l =~ m{^origin\s+(\S+)}) {
	    my $project = $1;
	    $project =~ s{\.git$}{};
	    $project =~ s{^git\@github.com:}{};
	    $project =~ s{.*/([^/]+/[^/]+)$}{$1};
	    return $project if defined $project && length $project;
	}
    }
    warn "Cannot guess project from current directory...\n";
    undef;
}
