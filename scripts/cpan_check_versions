#!/usr/bin/perl -w
# -*- perl -*-

#
# $Id: cpan_check_versions,v 1.3 2007/10/22 19:48:53 eserte Exp $
# Author: Slaven Rezic
#
# Copyright (C) 2007 Slaven Rezic. All rights reserved.
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl itself.
#
# Mail: slaven@rezic.de
# WWW:  http://www.rezic.de/eserte/
#

use strict;

use Cwd qw(cwd);
use ExtUtils::Manifest qw(maniread);
use ExtUtils::MM_Unix;
use File::Compare qw(compare);
use File::Spec qw();

sub save_pwd (&);

my $olddistdir = shift;
if (!$olddistdir) {
    warn "No old distribution given, try to find one in the current directory...\n";
    require CPAN::DistnameInfo;
    require CPAN::Version;
    my $max_version;
    my $best_dist;
    for my $f (glob("*")) {
	next if !-f $f;
	my $d = CPAN::DistnameInfo->new($f);
	next if !$d;
	if (!defined $max_version || CPAN::Version->vgt($d->version, $max_version)) {
	    $max_version = $d->version;
	    $best_dist = $d;
	}
    }
    if (!$best_dist) {
	die "Could not find any distribution in the current directory.\n";
    }
    warn "Found " . $best_dist->filename . "\n";
    $olddistdir = $best_dist->filename;
}

if ($olddistdir =~ m{\.(tar\.gz|tgz)$}) {
    my $olddistfile = File::Spec->rel2abs($olddistdir);
    require File::Temp;
    require Archive::Tar;
    my($tempdir) = File::Temp::tempdir(CLEANUP => 1);
    save_pwd {
	chdir $tempdir or die "Can't chdir to $tempdir: $!";
	my $tar = Archive::Tar->new;
	$tar->read($olddistfile, 1)
	    or die "Cannot open $olddistfile";
	$tar->extract;
	my(@extracted_files) = glob("*");
	if (@extracted_files != 1) {
	    die "Unexpected number of extracted files/directories: @extracted_files";
	}
	chdir $extracted_files[0] or die "Can't chdir to $extracted_files[0]: $!";
	$olddistdir = cwd;
    };
}

my $errors = 0;
my $distdir = shift || cwd;
my $manifest_file = "$distdir/MANIFEST";
my $manifest = maniread($manifest_file);
for my $file (keys %$manifest) {
    if ($file =~ m{\.pm}) {
	my $new_file = $distdir."/".$file;
	my $old_file = $olddistdir."/".$file;
	if (!-e $old_file) {
	    warn "NOTE: $file is new...\n";
	    next;
	}

	my $differs;
	if (compare($old_file,$new_file) != 0) {
	    $differs = 1;
	} else {
	    (my $old_xs = $old_file) =~ s{\.pm$}{.xs};
	    (my $new_xs = $new_file) =~ s{\.pm$}{.xs};
	    if ((-e $old_xs && -e $new_xs) &&
		compare($old_xs,$new_xs) != 0) {
		$differs = 1;
	    }
	}

	if ($differs) {
	    my $old_version = MM->parse_version($old_file);
	    my $new_version = MM->parse_version($new_file);
	    if ($old_version eq $new_version) {
		warn "ERROR: $file differ, but version is still the same: $new_version\n";
		$errors++;
	    }
	}
    }
}

if (!$errors) {
    warn "Version checks completed, no errors found.\n";
}
if ($errors > 255) {
    $errors = 255;
}
exit $errors;

# REPO BEGIN
# REPO NAME save_pwd /home/e/eserte/work/srezic-repository 
# REPO MD5 0f7791cf8e3b62744d7d5cfbd9ddcb07

=head2 save_pwd(sub { ... })

=for category File

Save the current directory and assure that outside the block the old
directory will still be valid.

=cut

sub save_pwd (&) {
    my $code = shift;
    require Cwd;
    my $pwd = Cwd::cwd();
    eval {
	$code->();
    };
    my $err = $@;
    chdir $pwd or die "Can't chdir back to $pwd: $!";
    die $err if $err;
}
# REPO END

__END__
