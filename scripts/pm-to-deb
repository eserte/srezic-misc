#!/usr/bin/perl
# -*- perl -*-

#
# Copyright (C) 2008,2009,2016 Slaven Rezic All rights reserved.
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl itself.
#

=head1 NAME

pm-to-deb - return Debian package names for Perl modules

=head1 SYNOPSIS

    $ apt-file update
    $ pm-to-deb DBI DBD::mysql Template Kwalify Does::Not::Exist
    libdbd-mysql-perl
    libdbi-perl
    libkwalify-perl
    libtemplate-perl
    Cannot find package for Does::Not::Exist

In a CPAN distribution directory it's possible to get the requirements
from the F<META.yml> file:

    $ pm-to-deb --from-meta

Or more accurate, after a C<perl Makefile.PL> or C<perl Build.PL> a
F<MYMETA.yml> file is usually available which also has I<dynamic>
prereqs listed:

    $ pm-to-deb --from-mymeta

=cut

use strict;
use warnings;
our $VERSION = '3.01';

use File::Basename 'dirname';
use File::Spec;
use Getopt::Long;

my $sources_list;
my $fast;
my $direct;
my $v;
my $all;
my $from_mymeta;
my $from_meta;
my $from_log;
my @contents_files;
my $method = 'direct-cache-capture';
GetOptions('method=s'         => \$method,
           'sources-list|s=s' => \$sources_list,
           'v'                => \$v,
           'all'              => \$all,
           'from-mymeta'      => \$from_mymeta,
           'from-meta'        => \$from_meta,
           'from-log=s'       => \$from_log,
           'contents-file=s@' => \@contents_files,
          )
    or die "usage: $0 [--from-mymeta | --from-meta | --from-log] [--sources-list ...] [--contents-file ...] [-method ...] [-all] [-v] ...\n";

my @modules;
if ($from_mymeta) {
    push @modules, load_requires('MYMETA.yml');
}
if ($from_meta) {
    warn "WARNING: you specified --from-mymeta AND --from-meta, which is not very useful. Still continuing...\n";
    push @modules, load_requires('META.yml');
}
if (defined $from_log) {
    push @modules, parse_log_for_modules($from_log);
}

push @modules, @ARGV;
@modules
    or die <<EOF;
Please specify one or more module names, or
use the --from-mymeta or --from-meta switches
if in a CPAN distribution directory.
EOF

@modules = do {
    my %seen;
    grep { !$seen{$_}++ } @modules;
};

# Find the library path of this perl. . and /etc/perl are removed.
# Symlinks are resolved and added additionally to the symlink entry.
my @my_INC = map {
    # perl's @INC may say .../5.10 (which is just a symlink), while
    # apt-file says .../5.10.0
    my $dir = $_;
    my $l = readlink $dir;
    if (defined $l) {
        $l = File::Spec->rel2abs($l, dirname $dir);
        if ($l eq $dir) {
            undef $l;
        }
    }
    ($dir, (defined $l ? $l : ()));
} grep {
    $_ ne '.' && $_ ne '/etc/perl'
} @INC;

if ($method eq 'direct-cache-capture') {
    # This is the best method: reasonably fast for large module lists
    # and capable to output missing packages.
    my $prefix_rx = "^(?:" . join("|", map { quotemeta(substr($_, 1)) } @my_INC) . ")/";
    my %capture_to_module;
    my $regexp = do {
        my $i = 0;
        $prefix_rx . '(' . join('|', map {
            ++$i;
            $capture_to_module{'m'.$i} = $_;
            my $module_file = module_to_file($_);
            "(?<m$i>" . quotemeta($module_file) . ')';
        } @modules) . ')';
    };
    $regexp = qr{$regexp};
    my %seen_module;
    if (!@contents_files) {
        my $archname = get_archname();
        require File::Glob;
        if (-d "$ENV{HOME}/.cache/apt-file") { # non-root usage
            @contents_files = File::Glob::bsd_glob("$ENV{HOME}/.cache/apt-file/*_Contents-$archname.gz");
        } else { # root usage
            @contents_files = (
                               File::Glob::bsd_glob("/var/cache/apt/apt-file/*_Contents-$archname.gz"),
                               File::Glob::bsd_glob("/var/lib/apt/lists/*_Contents-$archname.lz4"),
                              );
        }
        if (!@contents_files) {
            system('which apt-file >/dev/null 2>&1');
            if ($? != 0) {
                die "apt-file does not seem to be installed.\nPlease install it using 'apt-get install apt-file'\nand then run 'apt-file update'\n";
            } else {
                die "Cannot find any Contents files. Maybe 'apt-file update' was never run?\n";
            }
        }
    }

    my %module_to_packages;
    for my $file (@contents_files) {
        my @cmd;
        if ($file =~ m{\.lz4$}) {
            @cmd = ('/usr/lib/apt/apt-helper', 'cat-file', $file);
        } else {
            @cmd = ('zcat', $file);
        }
        open my $fh, '-|', @cmd or die "Error running @cmd: $!";
        while(<$fh>) {
            last if /^FILE\s+LOCATION$/;
        }
        while(<$fh>) {
            if ($_ =~ $regexp) {
                my $module;
                for my $capture (keys %+) {
                    $module = $capture_to_module{$capture};
                }
                die "UNEXPECTED ERROR: cannot find module for current captures (line $_, regexp $regexp)"
                    if !defined $module;
                $seen_module{$module} = 1;
                my($location) = $_ =~ m{.*/(.*)};
                $module_to_packages{$module}->{$location} = 1;
            }
        }
    }

    my %packages;
    for my $module (sort keys %module_to_packages) {
        my @alternatives = sort keys %{ $module_to_packages{$module} };
        if ($v) {
            print join(' | ', @alternatives) . " # $module\n";
        } else {
            if (@alternatives > 1) {
                my @alternatives_without_perl = grep { $_ ne 'perl' && $_ ne 'perl-modules' } @alternatives;
                if (@alternatives_without_perl == 1) {
                    $packages{$alternatives_without_perl[0]} = 1;
                } else {
                    warn "WARN: multiple alternatives for $module: @alternatives, choose one...\n";
                    $packages{$alternatives[0]} = 1;
                }
            } else {
                $packages{$alternatives[0]} = 1;
            }
        }
    }

    if (!$v) { # in -v mode we're already done
        for my $package (sort keys %packages) {
            print $package, "\n";
        }
    }

    my $not_found_count = 0;
    for my $module (@modules) {
        if (!$seen_module{$module}) {
            warn "Cannot find package for $module\n";
            $not_found_count++;
            if ($not_found_count > 126) {
                $not_found_count = 126;
            }
        }
    }
    exit $not_found_count;

} else {

    my $locator;
    my @cmd;
    # dlocate only works for *installed* packages
    if ($method =~ m{^dlocate(-fast)?$}) {
        if (!is_in_path("dlocate")) {
            die "dlocate is not installed, cannot proceed.\n";
        }
        $locator = 'dlocate';
        @cmd = ('dlocate', '--');
    } elsif ($method =~ m{^apt-file(-fast)?$}) {
        if (!is_in_path("apt-file")) {
            die "apt-file is not installed, cannot proceed.\n";
        }
        $locator = 'apt-file';
        @cmd = ('apt-file');
	if (defined $sources_list) {
            push @cmd, '--sources-list', $sources_list;
        }
        push @cmd, ('search', '--regexp');
    } else {
        die "Invalid method '$method'.\n";
    }

    my $find_packages_for_regexp = sub {
        my $regexp = shift;

        my %new_package;

        open my $fh, "-|", @cmd, $regexp
            or die $!;
        while(<$fh>) {
            chomp;
            my($pack, $file) = split /\s*:\s*/;
            $new_package{$pack}++;
        }

        if (!$all) {
            remove_conflicting_packages(\%new_package);
        }

        keys %new_package;
    };

    if ($method =~ m{-fast$}) {
        my $regexp = make_regexp(@modules);
        my @packages = find_packages_for_regexp($regexp);
        print map { "$_\n" } sort @packages;
    } else {
        my $not_found_count = 0;
        my %seen_package;
        for my $module (@modules) {
            my $module_file = module_to_file($module);

            # ?: is only needed for apt-file < 2.1.0
            my $regexp;
            if ($locator eq 'apt-file') {
                $regexp = "(?:" . join("|", map { substr($_, 1) } @my_INC) . ")/$module_file";
            } elsif ($locator eq 'dlocate') {
                $regexp = "("   . join("|", map { substr($_, 1) } @my_INC) . ")/$module_file";
            } else {
                die "Locator <$locator>?";
            }

            my @packages = find_packages_for_regexp($regexp);

            if (!@packages) {
                warn "Cannot find package for $module\n";
                $not_found_count++;
            } else {
                print map { "$_\n" } grep { !$seen_package{$_}++ } sort @packages;
            }
        }
        #print join("\n", sort keys %package), "\n";
        exit $not_found_count;
    }
}

# Hardcoded list of conflicting packages.
sub remove_conflicting_packages {
    my $packages_ref = shift;
    my @remove;
    if (exists $packages_ref->{'perlmagick'} &&
        exists $packages_ref->{'graphicsmagick-libmagick-dev-compat'}) {
        push @remove, 'graphicsmagick-libmagick-dev-compat';
    }
    if (exists $packages_ref->{'libgd-gd2-perl'}) {
        for my $package (qw(libgd-gd1-noxpm-perl libgd-gd1-perl libgd-gd2-noxpm-perl)) {
            if (exists $packages_ref->{$package}) {
                push @remove, $package;
            }
        }
    }
    if (exists $packages_ref->{'libtext-csv-xs-perl'} &&
        exists $packages_ref->{'libtext-csv-perl'}) {
        push @remove, 'libtext-csv-perl';
    }
    if (exists $packages_ref->{'libcatalyst-perl'} &&
        exists $packages_ref->{'libcatalyst-modules-perl'}) {
        push @remove, 'libcatalyst-perl';
    }
    for my $package (@remove) {
        if ($v) {
            warn "NOTE: deleting $package.\n";
        }
        delete $packages_ref->{$package};
    }
}

sub module_to_file {
    my $module = shift;
    (my $module_file = $module) =~ s{::}{/}g;
    $module_file .= ".pm";
    $module_file;
}

sub load_requires {
    my $file = shift;
    my $d;
    if      (eval { require YAML::XS; 1}) {
        $d = YAML::XS::LoadFile($file);
    } elsif (eval { require YAML::Syck; 1}) {
        $d = YAML::Syck::LoadFile($file);
    } else {
        require YAML;
        $d = YAML::LoadFile($file);
    }
    my @modules = sort keys %{ $d->{requires} || {} };
    if ($v) {
        warn "Found the following modules in ${file}'s requires section:\n@modules\n";
    }
    @modules;
}

sub parse_log_for_modules {
    my $from_log = shift;
    my %modules;
    open my $fh, '<', $from_log
        or die "Can't open $from_log: $!";
    while(<$fh>) {
        if (m{Can't locale (.*?)\.pm in \@INC}) {
            (my $mod = $1) =~ s{/}{::}g;
            $modules{$mod} = 1;
        }
        if (m{you may need to install the (\S+) module}) {
            $modules{$1} = 1;
        }
    }
    my @modules = sort keys %modules;
    if ($v) {
        warn "Found the following modules in $from_log:\n@modules\n";
    }
    @modules;
}

sub make_regexp {
    my(@modules) = @_;
    my @module_files = map { module_to_file($_) } @modules;
    my $prefix_rx = "(?:" . join("|", map { substr($_, 1) } @my_INC) . ")/";
    require Regexp::Assemble;
    my $ra = Regexp::Assemble->new;
    for my $module_file (@module_files) {
        $ra->add($prefix_rx . quotemeta($module_file));
    }
    my $regexp = $ra->re;
    $regexp;
}

sub get_archname {
    if (is_in_path('dpkg')) {
        if (open my $fh, '-|', 'dpkg', '--print-architecture') {
            chomp(my $archname = <$fh>);
            if (defined $archname && length $archname) {
                return $archname;
            }
        }
    }
    warn "WARN: dpkg is not available, fallback to guessing for archname detection...\n";
    require Config;
    my($archname) = $Config::Config{'osvers'} =~ m{-([^-]+)$};
    if (!$archname || $archname eq 'generic') {
        # Some examples:
        # Debian/squeeze:              myuname='linux madeleine 3.2.0-4-amd64 #1 smp debian 3.2.39-2 x86_64 gnulinux ';
        # Debian/wheezy self-compiled: myuname='linux eserte 3.2.0-4-amd64 #1 smp debian 3.2.60-1+deb7u3 x86_64 gnulinux ';
        # Debian/jessie:               myuname='linux themisto 3.16.0-4-amd64 #1 smp debian 3.16.7-ckt20-1+deb8u3 (2016-01-17) x86_64 gnulinux ';
        # Mint13:                      myuname='linux panlong 2.6.42-37-generic #58-ubuntu smp thu jan 24 15:28:10 utc 2013 x86_64 x86_64 x86_64 gnulinux ';
        if ($Config::Config{'myuname'} =~ m{ x86_64 gnulinux}) {
            $archname = 'amd64';
        } else {
            warn "WARN: Cannot guess archname from \$Config{osvers} or \$Config{myuname}, fallback to amd64\n";
            $archname = 'amd64';
        }
    }
    $archname;
}

=head1 DESCRIPTION

B<pm-to-deb> returns for the given Perl and CPAN modules a list of
corresponding Debian packages. The list is written to C<STDOUT>, one
package per line. If some modules could not be mapped to Debian
packages, then these are written to C<STDERR>; also the exit code is
greater than zero in this case.

=head2 OPTIONS

=over

=item C<--from-meta>

Use the requirement list from the F<META.yml> file in the current
directory as the input list of modules.

=item C<--from-mymeta>

Use the requirement list from the F<MYMETA.yml> file in the current
directory as the input list of modules. This file is usually created
after running F<perl Makefile.PL> resp. F<perl Build.PL>, and is more
accurate than the F<META.yml> list, at least for the current system.

=item C<--from-log I<file>>

Specify a log file which contains "Can't locate ... in @INC" errors.
This log file is parsed and the found modules used as input list of
modules.

=back

If neither C<--from-meta> nor C<--from-mymeta> is given, then
B<pm-to-deb> expects a list of modules as arguments.

=head2 OBSCURE OPTIONS

=over

=item C<--method I<method>>

Use a different method for determining the mapping. Currently there are:

=over

=item * C<direct-cache-capture>

The default method. It parses the Contents files fetched by C<apt-file
update> directly and uses a regexp-capture technique to find out which
modules cannot be mapped to packages.

=item * C<apt-file>

Use L<apt-file(1)> instead of parsing the Contents files directly.
Quite slow.

=item * C<apt-file-fast>

Like C<apt-file>, but uses a combined regexp (which is assembled with
L<Regexp::Assemble>) to speed up the search; the downside is that
there's no output about unmapped modules.

=item * C<dlocate>

Use L<dlocate(1)> for the file-to-package mapping. C<dlocate> operates
only on installed packages.

=item * C<dlocate-fast>

Like C<dlocate>, but use L<Regexp::Assemble> for faster searching.

=back

=item C<--sources-list sourceslist>

Specify the C<--sources-list> option to be passed to C<apt-file> (only
for methods using C<apt-file>).

=item C<--all>

For modules mapping to multiple packages return them all. Only
applicable for C<apt-file*> methods.

=item C<--contents-file file.gz>

Use one or more specific Contents file for parsing. Mainly used for
debugging.

=back

=head1 EXAMPLES

To install dependencies of an already extracted standard perl
distribution with a shipped F<Makefile.PL> do:

   apt-file update && sudo apt-get update && perl Makefile.PL && sudo apt-get install $(pm-to-deb --from-mymeta)

If only F<Build.PL> is shipped do instead:

   apt-file update && sudo apt-get update && perl Build.PL && sudo apt-get install $(pm-to-deb --from-mymeta)

=head1 BUGS

It is possible that a Perl module is provided by more than one Debian
package. There's a list of some of these conflicting packages
(Image::Magick, GD), but only for the C<apt-file*> method, and
possibly more conflicts are missing.

It's not very fast. The default method C<direct-cache-capture> may
take some 30-60s, other methods may be much slower.

=head1 TODO

It would be nice that in the case of conflicting modules, already
installed packages would be preferred. This would be useful if the
generated list is used for installing packages on the current host,
but not for generating package lists for meta packages or so.

=head1 AUTHOR

Slaven Rezic

=head1 SEE ALSO

L<apt-file(1)>.

=cut

######################################################################
# Repository helpers

# REPO BEGIN
# REPO NAME is_in_path /home/slavenr/work2/srezic-repository 
# REPO MD5 e18e6687a056e4a3cbcea4496aaaa1db
sub is_in_path {
    my($prog) = @_;
    if (file_name_is_absolute($prog)) {
	if ($^O eq 'MSWin32') {
	    return $prog       if (-f $prog && -x $prog);
	    return "$prog.bat" if (-f "$prog.bat" && -x "$prog.bat");
	    return "$prog.com" if (-f "$prog.com" && -x "$prog.com");
	    return "$prog.exe" if (-f "$prog.exe" && -x "$prog.exe");
	    return "$prog.cmd" if (-f "$prog.cmd" && -x "$prog.cmd");
	} else {
	    return $prog if -f $prog and -x $prog;
	}
    }
    require Config;
    %Config::Config = %Config::Config if 0; # cease -w
    my $sep = $Config::Config{'path_sep'} || ':';
    foreach (split(/$sep/o, $ENV{PATH})) {
	if ($^O eq 'MSWin32') {
	    # maybe use $ENV{PATHEXT} like maybe_command in ExtUtils/MM_Win32.pm?
	    return "$_\\$prog"     if (-f "$_\\$prog" && -x "$_\\$prog");
	    return "$_\\$prog.bat" if (-f "$_\\$prog.bat" && -x "$_\\$prog.bat");
	    return "$_\\$prog.com" if (-f "$_\\$prog.com" && -x "$_\\$prog.com");
	    return "$_\\$prog.exe" if (-f "$_\\$prog.exe" && -x "$_\\$prog.exe");
	    return "$_\\$prog.cmd" if (-f "$_\\$prog.cmd" && -x "$_\\$prog.cmd");
	} else {
	    return "$_/$prog" if (-x "$_/$prog" && !-d "$_/$prog");
	}
    }
    undef;
}
# REPO END

# REPO BEGIN
# REPO NAME file_name_is_absolute /home/slavenr/work2/srezic-repository 
# REPO MD5 89d0fdf16d11771f0f6e82c7d0ebf3a8
BEGIN {
    if (eval { require File::Spec; defined &File::Spec::file_name_is_absolute }) {
	*file_name_is_absolute = \&File::Spec::file_name_is_absolute;
    } else {
	*file_name_is_absolute = sub {
	    my $file = shift;
	    my $r;
	    if ($^O eq 'MSWin32') {
		$r = ($file =~ m;^([a-z]:(/|\\)|\\\\|//);i);
	    } else {
		$r = ($file =~ m|^/|);
	    }
	    $r;
	};
    }
}
# REPO END

# Local Variables:
# mode: cperl
# cperl-indent-level: 4
# indent-tabs-mode: nil
# End:
# vim:sw=4:ts=8:sta:et
