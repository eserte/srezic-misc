#!/usr/bin/perl -w
# -*- perl -*-

#
# Author: Slaven Rezic
#
# Copyright (C) 2009,2010,2018 Slaven Rezic. All rights reserved.
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl itself.
#
# Mail: slaven@rezic.de
# WWW:  http://www.rezic.de/eserte/
#

use strict;
use Data::ICal   qw();
use Encode       qw(encode);
use File::Basename qw(dirname basename);
use File::Spec   qw();
use File::Temp   qw(tempfile);
use Getopt::Long;
use POSIX        qw(strftime);
use Time::Local  qw(timelocal timegm);

my $itemdepth = 2;
my $do_alarm_handling = 1;
my $add_to_file;
my $only_future;
my $encoding_hack = 1;
GetOptions("itemdepth=i" => \$itemdepth,
	   "alarm!"      => \$do_alarm_handling,
	   "add=s"       => \$add_to_file,
	   "only-future" => \$only_future,
	  )
    or die "usage: $0 [-itemdepth ...] [-noalarm] [-add /path/to/file/orgsection] [-only-future]\n";

my $itemstart = "*" x $itemdepth . " ";
my $propstart = " " x ($itemdepth+1);

my @tie_array;
my $tie_begin_section_index;
my $add_to_section;
if ($add_to_file) {
    $add_to_section = basename $add_to_file;
    $add_to_file    = dirname $add_to_file;
    if (!-w $add_to_file || !-f $add_to_file) {
	die "File '$add_to_file' does not exist or is not writable";
    }
    if (emacs_file_locked($add_to_file)) {
	if (-e "/dev/tty") { # only on Unix systems
	    print STDERR "*** WARN: The file <$add_to_file> looks like
          it is locked by emacs. Really add to file? (y/N) ";
	    my $ans;
	    if (open my $fh, "<", "/dev/tty") {
		chomp($ans = <$fh>);
	    } else {
		warn "Cannot read from /dev/tty: $!";
	    }
	    if ($ans !~ m{^y}i) {
		exit 1;
	    }
	}
    }
    require Tie::File;
    open my $fh, '+<', $add_to_file
	or die "Cannot open or write to $add_to_file: $!";
    #XXX does not work!!! binmode $fh, ':utf8'; # we only support utf-8
    tie @tie_array, 'Tie::File', $fh
	or die "Cannot tie to filehandle: $!";
    for my $line_i (0 .. $#tie_array) {
	if ($tie_array[$line_i] =~ m{^\*\s+\Q$add_to_section\E\b}) {
	    $tie_begin_section_index = $line_i + 1;
	    last;
	}
    }
    if (!defined $tie_begin_section_index) {
	die "Cannot find section '* $add_to_section' in file '$add_to_file'";
    }
}

if (!@ARGV) {
    warn "Reading from STDIN...\n";
    @ARGV = "-";
}

my $today_orgdate_prefix = strftime("<%Y-%m-%d", localtime time);

my @result; # { id => ..., orgstring => ... }
for my $file (@ARGV) {
    my $ical;
    if ($encoding_hack) {
	# Data::Ical does not seem to handle encodings in any way. A
	# possible solution is to read the file and do the encoding
	# ourselves. Assume utf-8 in all cases
	my $data;
	my $fh;
	if ($file eq '-') {
	    $fh = \*STDIN;
	} else {
	    open $fh, '<', $file
		or die "Can't open $file: $!";
	}
	binmode $fh, ':utf8';
	local $/ = undef;
	$data = <$fh>;
	$ical = _try_parse_ical(data => $data);
    } else {
	if ($file eq '-') {
	    my($tmpfh, $tmpfile)=tempfile(UNLINK => 1, SUFFIX => ".vcs");
	    binmode STDIN, ':utf8';
	    binmode $tmpfh, ':utf8';
	    while(<STDIN>) {
		print $tmpfh $_
		    or die $!;
	    }
	    close $tmpfh or die $!;
	    $file = $tmpfile;
	}
	$ical = _try_parse_ical(filename => $file);
    }
    if (!$ical) {
	warn "Cannot recognize file $file as ical file '" . $ical->error_message . "', skipping...\n";
	next;
    }
    for my $entry (@{ $ical->entries }) {
	next if $entry->ical_entry_type ne 'VEVENT';
	my $props = $entry->properties;
	# XXX use decoded_value?
	my $dtstart  = eval { $props->{dtstart}->[0]->value };
	my $begin    = icaldate_to_orgdate($dtstart);
	$begin = alarm_handling($begin, $entry) if $begin && $do_alarm_handling;
	if ($only_future) {
	    next if !$begin || $begin lt $today_orgdate_prefix;
	}
	my $end      = icaldate_to_orgdate(eval { $props->{dtend}->[0]->value });
	my $id       = icaluid_to_orgid(eval { $props->{uid}->[0]->value });
	my $location = eval { $props->{location}->[0]->value };
	my $summary  = eval { $props->{summary}->[0]->value } || "no summary";
	my $description = eval { $props->{description}->[0]->value } || undef;
	my @attendees;
	for my $attendee (@{ $props->{attendee} || [] }) {
	    push @attendees, $attendee->{value} if $attendee->{value};
	}
	my $orgstring = $itemstart . $summary . ($begin ? " $begin" : "") . ($end ? "--$end" : "") . "\n";
	my $leadingspace = " "x length($itemstart);
	if (defined $description) {
	    # XXX some systems create \\n, some create just \n ...
	    $orgstring .= join("", map { $leadingspace . $_ . "\n" } split /(?:\\n|\n)/, $description);
	}
	for my $attendee (@attendees) {
	    $orgstring .= $leadingspace . "* " . $attendee . "\n";
	}
	if (defined $id || defined $location) {
	    $orgstring .= $propstart . ":PROPERTIES:\n";
	    if (defined $id) {
		$orgstring .= $propstart . ":ID: $id\n";
	    }
	    if (defined $location) {
		$orgstring .= $propstart . ":LOCATION: $location\n";
	    }
	    $orgstring .= $propstart . ":END:\n";
	}
	# From this point on we assume $orgstring as an opaque binary.
	# Because setting the utf8 flag on a Tie::File does not work
	# (see above), we do the encoding here:
	$orgstring = encode 'utf-8', $orgstring;
	push @result, { orgstring => $orgstring,
			(defined $id ? (id => $id) : ()),
		      };
    }
}

if (@result) {
    if ($add_to_file) {
	# check first if the date is modified
	my %entry_id_to_line;
	my $last_entry_line_i;
	my $current_id;
	for(my $i = $tie_begin_section_index; $i <= $#tie_array; $i++) {
	    last if $tie_array[$i] =~ m{^\*\s+}; # another section follows
	    if ($tie_array[$i] =~ m{^\*\*\s+}) {
		$last_entry_line_i = $i;
	    } elsif ($tie_array[$i] =~ m{^\s+:ID:\s+([a-fA-F0-9-]+)\s*$}) {
		$current_id = $1;
		$entry_id_to_line{$current_id} = {begin => $last_entry_line_i};
		undef $last_entry_line_i;
	    } elsif ($tie_array[$i] =~ m{^\s+:END:\s*$}) {
		if (defined $current_id) {
		    $entry_id_to_line{$current_id}->{end} = $i;
		    undef $current_id;
		}
	    }
	}
	for my $result (@result) {
	    if ($result->{id} && exists $entry_id_to_line{$result->{id}}) {
		my($begin, $end) = @{$entry_id_to_line{$result->{id}}}{qw(begin end)};
		if (!defined $end) {
		    warn "PROPERTIES without END? Skipping $result->{id}...\n";
		} else {
		    $result->{update_region_begin} = $begin;
		    $result->{update_region_end}   = $end;
		}
	    }
	}
	@result = sort {
	    return +1 if !exists $a->{update_region_begin};
	    return -1 if !exists $b->{update_region_begin};
	    $b->{update_region_begin} <=> $a->{update_region_begin};
	} @result;

	for my $result (@result) {
	    my($begin, $end) = @{$result}{qw(update_region_begin update_region_end)};
	    if (defined $begin) {
		my $len = $end - $begin + 1;
		splice @tie_array, $begin, $len, $result->{orgstring};
	    } else {
		splice @tie_array, $tie_begin_section_index, 0, $result->{orgstring};
	    }
	}
    } else {
	print join "", map { $_->{orgstring} } @result;
    }
}

sub alarm_handling {
    my($org_date, $vevent) = @_;
    my $vevent_props = $vevent->properties;
    my $dtstart = eval { $vevent_props->{dtstart}->[0]->value };
    my $alarm;

    # VALARM
    my($valarm) = grep { $_->ical_entry_type eq 'VALARM' } @{ $vevent->entries };
    if ($valarm) {
	my $valarm_props = $valarm->properties;
	$alarm = eval { $valarm_props->{trigger}->[0]->{value} };
    }
    if (!$valarm and $alarm = eval{ $vevent_props->{aalarm}->[0]->value }) {
	($alarm) = split /;/, $alarm; # XXX what are the other fields?
    }
    if ($alarm) {
	my $alarm_epoch = _isodate_to_epoch($alarm);
	if (!defined $alarm_epoch) {
	    warn "Cannot parse valarm.trigger or aalarm field '$alarm', ignoring.\n";
	} else {
	    my $dtstart_epoch = _isodate_to_epoch($dtstart);
	    if (defined $alarm_epoch) {
		if ($alarm_epoch >= $dtstart_epoch) {
		    warn "Ignoring specified alarm '$alarm' for date '$dtstart'...\n";
		} else {
		    my $alarm_spec = '-';
		    my $delta = $dtstart_epoch-$alarm_epoch;
		    if ($delta % 3600 == 0) {
			$alarm_spec .= ($delta/3600).'h';
		    } elsif ($delta % 60 == 0) {
			$alarm_spec .= ($delta/60).'min';
		    } else {
			$alarm_spec .= $delta.'s';
		    }
		    $org_date =~ s{>}{ $alarm_spec>};
		}
	    }
	}
    }
    $org_date;
}

sub _isodate_to_epoch {
    my $dt = shift;
    if (my($Y,$M,$D,$h,$m,$s,$tz) = $dt =~ m{^(\d{4})(\d{2})(\d{2})T(\d{2})(\d{2})(\d{2})(Z)?$}) {
	my $epoch;
	if ($tz) {
	    if ($tz eq 'Z' || $tz eq '+0000') {
		$epoch = timegm($s,$m,$h,$D,$M-1,$Y);
	    } else {
		warn "Cannot deal with timezone '$tz' in date '$dt'";
		return undef;
	    }
	} else {
	    $epoch = timelocal($s,$m,$h,$D,$M-1,$Y);
	}
	$epoch;
    } else {
	undef;
    }
}

sub icaldate_to_orgdate {
    my $dt = shift;
    return if !defined $dt;
    if (defined(my $epoch = _isodate_to_epoch($dt))) {
	strftime "<%Y-%m-%d %a %H:%M>", localtime $epoch;
    } elsif (my($Y,$M,$D) = $dt =~ m{^(\d{4})(\d{2})(\d{2})$}) {
	my $epoch = eval { timelocal(0,0,0,$D,$M-1,$Y) };
	if ($@) {
	    # Yeah. Saw .ics files generated by
	    #    PRODID:-//Apple Computer\, Inc//iCal 2.0//EN
	    # producing
	    #    DTSTART;VALUE=DATE:20110531
	    #    DTEND;VALUE=DATE:20110532
	    warn "Cannot parse date '$dt': $@";
	    return undef;
	}
	strftime "<%Y-%m-%d %a>", localtime $epoch;
    } else {
	warn "Cannot parse date '$dt'!";
	undef;
    }
}

sub icaluid_to_orgid {
    my $uid = shift;
    return if !defined $uid;
    $uid =~ s{^\s+(?:TS|DL|SC)-}{}; # XXX why? The space seems to be a org-mode bug (report!) The prefixes stand for timestamp, deadline, scheduled
    $uid;
}

# Taken from bbbike/miscsrc/insert_points (emacs_lockfile) and
# slightly changed
sub emacs_file_locked {
    my $file = shift;
    my $lock_file;
    if ($file =~ m{/.*?$}) {
	($lock_file = $file) =~ s{/([^/]+)$}{/.#$1};
    } else {
	$lock_file = '.#' . $file;
    }
    -l $lock_file;
}

sub _try_parse_ical {
    my(%args) = @_;
    my $ical;
    for my $val10_flag (0, 1) {
	# Data::ICal::parse is too noisy for real-existing ical files
	# (e.g. from the N95, or from org-mode), and I did not find
	# another way to quieten the carp() there.
	open my $OLDERR, ">&", \*STDERR or die $!;
	open(STDERR, ">", File::Spec->devnull) or die $!;
	$ical = Data::ICal->new(%args, vcal10 => $val10_flag);
	close STDERR;
	open(STDERR, ">&", $OLDERR) or die $!;
	return $ical;
    }
    undef;
}

__END__

=head1 NAME

ical2org - format ical entries into org-mode-compatible entries

=head1 SYNOPSIS

    ical2org [-itemdepth ...] [-noalarm] [-add /path/to/orgfile/section] ical.vcs ...
    # and then paste the output into an org-mode emacs buffer

=head1 DESCRIPTION

With the C<-add> option an existing section in an existing org-mode
file may be specified. The value for this options needs to be
I</filepath/section>, where I<filepath> is the path to the org-mode
file, and I<section> is the section name within the file. Note that
it's expected that the section is a top-level heading, that is,
prefixed just with one star.

It is also assumed that the org-mode file is encoded as utf-8. No
other encoding is supported.

=head1 TODO

 * Maybe work with L<Date::ICal> for parsing dates?

 * timezone handling is missing

=head1 PREREQUISITES

Data::ICal

=head1 AUTHOR

Slaven Rezic

=cut
