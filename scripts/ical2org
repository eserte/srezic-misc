#!/usr/bin/perl -w
# -*- perl -*-

#
# $Id: ical2org,v 1.8 2009/02/09 15:56:33 eserte Exp $
# Author: Slaven Rezic
#
# Copyright (C) 2009 Slaven Rezic. All rights reserved.
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl itself.
#
# Mail: slaven@rezic.de
# WWW:  http://www.rezic.de/eserte/
#

use strict;
use Data::ICal   qw();
use File::Spec   qw();
use File::Temp   qw(tempfile);
use Getopt::Long;
use POSIX        qw(strftime);
use Time::Local  qw(timelocal timegm);

my $itemdepth = 2;
GetOptions("itemdepth=i" => \$itemdepth)
    or die "usage: $0 [-itemdepth ...]";

my $itemstart = "*" x $itemdepth . " ";
my $propstart = " " x ($itemdepth+1);

if (!@ARGV) {
    warn "Reading from STDIN...\n";
    @ARGV = "-";
}

for my $file (@ARGV) {
    if ($file eq '-') {
	my($tmpfh, $tmpfile)=tempfile(UNLINK => 1, SUFFIX => ".vcs");
	while(<STDIN>) {
	    print $tmpfh $_
		or die $!;
	}
	close $tmpfh or die $!;
	$file = $tmpfile;
    }
    my $ical;
    for my $val10_flag (0, 1) {
	# Data::ICal::parse is too noisy for real-existing ical files
	# (e.g. from the N95, or from org-mode), and I did not find
	# another way to quieten the carp() there.
	open my $OLDERR, ">&", \*STDERR or die $!;
	open(STDERR, ">", File::Spec->devnull) or die $!;
	$ical = Data::ICal->new(filename => $file, vcal10 => $val10_flag);
	close STDERR;
	open(STDERR, ">&", $OLDERR) or die $!;
	last if $ical;
    }
    if (!$ical) {
	warn "Cannot recognize file $file as ical file '" . $ical->error_message . "', skipping...\n";
	next;
    }
    for my $entry (@{ $ical->entries }) {
	next if $entry->ical_entry_type ne 'VEVENT';
	my $props = $entry->properties;
	# XXX use decoded_value?
	my $begin    = icaldate_to_orgdate(eval { $props->{dtstart}->[0]->value });
	my $end      = icaldate_to_orgdate(eval { $props->{dtend}->[0]->value });
	my $id       = icaluid_to_orgid(eval { $props->{uid}->[0]->value });
	my $location = eval { $props->{location}->[0]->value };
	my $summary  = eval { $props->{summary}->[0]->value } || "no summary";
	print $itemstart . $summary . ($begin ? " $begin" : "") . ($end ? "--$end" : "") . "\n";
	if (defined $id || defined $location) {
	    print $propstart, ":PROPERTIES:\n";
	    if (defined $id) {
		print $propstart, ":ID: $id\n";
	    }
	    if (defined $location) {
		print $propstart, ":LOCATION: $location\n";
	    }
	    print $propstart, ":END:\n";
	}
    }
}

sub icaldate_to_orgdate {
    my $dt = shift;
    return if !defined $dt;
    if (my($Y,$M,$D,$h,$m,$s,$tz) = $dt =~ m{^(\d{4})(\d{2})(\d{2})T(\d{2})(\d{2})(\d{2})(Z)?$}) {
	my $epoch;
	if ($tz) {
	    if ($tz eq 'Z' || $tz eq '+0000') {
		$epoch = timegm($s,$m,$h,$D,$M-1,$Y);
	    } else {
		warn "Cannot deal with timezone '$tz' in date '$dt'";
		return undef;
	    }
	} else {
	    $epoch = timelocal($s,$m,$h,$D,$M-1,$Y);
	}
	strftime "<%Y-%m-%d %a %H:%M>", localtime $epoch;
    } elsif (($Y,$M,$D) = $dt =~ m{^(\d{4})(\d{2})(\d{2})$}) {
	sprintf "%04d-%02d-%02d", $Y, $M, $D;
    } else {
	warn "Cannot parse date '$dt'!";
	undef;
    }
}

sub icaluid_to_orgid {
    my $uid = shift;
    return if !defined $uid;
    $uid =~ s{^\s+(?:TS|DL|SC)-}{}; # XXX why? The space seems to be a org-mode bug (report!) The prefixes stand for timestamp, deadline, scheduled
    $uid;
}

__END__

=head1 NAME

ical2org - format ical entries into org-mode-compatible entries

=head1 SYNOPSIS

    ical2org [-itemdepth ...] ical.vcs ...
    # and then paste the output into an org-mode emacs buffer

=head1 TODO

 * Maybe work with L<Date::ICal> for parsing dates?

=head1 PREREQUISITES

Data::ICal

=head1 AUTHOR

Slaven Rezic

=cut
