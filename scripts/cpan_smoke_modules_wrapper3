#!/usr/bin/perl

use strict;
use FindBin;
use Getopt::Long;

sub run_smoker ($$$);
sub spec_usage (;$);
sub maybe_xterm_conf ($);

my $do_maintperl;
my @specs;
my $mirror_url = "http://cpan.cpantesters.org/";

GetOptions("maintperl" => \$do_maintperl,
	   "mirrorurl=s" => \$mirror_url,
	   'spec=s@'     => \@specs,
	  )
    or die "usage: $0 [-mirrorurl ...] [-maintperl | -spec perlver,stableness,daterange]";

my $recent_url = $mirror_url;

if (!$do_maintperl && !@specs) {
    die "Please specify either -maintperl or -spec";
}

if (@specs) {
    # First just check
    for my $spec (@specs) {
	my($perlver, $stableness, $range) = split /,/, $spec;
	spec_usage if !defined $range;
	spec_usage("perl version in '$spec' does not look like expected") if $perlver !~ m{^\d+\.\d+\.}; # does not look like a perl version (be not to strict here)
	spec_usage("stableness in '$spec' must be 'stable' or 'devel'") if $stableness !~ m{^(devel|stable)$};
	spec_usage("time range in '$spec' does not look like '-\${DAYS}d'") if $range !~ m{^-\d+.*};
    }

    for my $spec (@specs) {
	my($perlver, $stableness, $range) = split /,/, $spec;
	maybe_xterm_conf "INIT cpan_smoke_modules wrapper";
	run_smoker $perlver, $stableness, $range;
	maybe_xterm_conf "FINISHED cpan_smoke_modules wrapper";
    }
} elsif ($do_maintperl) {
    # installs everything stable and tests also developer versions
    maybe_xterm_conf "INIT maintperl";

    (getpwuid($<))[0] eq 'cpansand'
    	or die "Works only for cpansand!";

    run_smoker '5.18.2', 'devel', '-3d';
    run_smoker '5.18.2', 'stable', '-3d'; # XXX fix some day?

    run_smoker '5.18.1', 'devel', '-3d';
    run_smoker '5.18.1', 'stable', '-20d';

    run_smoker '5.19.7', 'devel', '-3d';
    run_smoker '5.19.7', 'stable', '-20d';

    run_smoker '5.8.9t', 'devel', '-3d';
    run_smoker '5.8.9t', 'stable', '-20d';

    run_smoker '5.16.3', 'devel', '-3d';
    run_smoker '5.16.3', 'stable', '-20d';

    run_smoker '5.10.1t', 'devel', '-3d';
    run_smoker '5.10.1t', 'stable', '-20d';

    maybe_xterm_conf "FINISHED maintperl";
}

sub run_smoker ($$$) {
    my($perl_version, $stability, $interval) = @_;
    warn "*** $perl_version: Just test uploads last $interval, " . ($stability eq 'stable' ? 'only stable' : 'also devel') . " versions...\n";
    my $perl_exe = '/usr/perl' . $perl_version . '/bin/perl' . $perl_version;
    if (!-x $perl_exe) {
	$perl_exe = '/usr/local/bin/perl' . $perl_version;
	if (!-x $perl_exe) {
	    die "Cannot find a perl $perl_version, tried in /usr/perlXXX and $perl_exe";
	}
    }
    my $install_arg = ($stability eq 'stable' ? '-install' : '');
    #my $install_arg = ''; # never install, currently running as non-cpansand with sudo configured
    my $cmd = q{env PERL_BATCH=yes ~eserte/work/srezic-misc/scripts/cpan_smoke_modules -savereports -typescript -nosignalend } . $install_arg . q{ -perl } . $perl_exe . q{ -skiptested -r } . "-mirrorurl $mirror_url" . q{ -- `~eserte/work/srezic-misc/scripts/cpan_recent_uploads2 -onlydists -url } . $recent_url . q{ -from } . $interval . q{ -to -2m -v } . ($stability eq 'stable' ? '-stable' : '') . q{ | grep -v '\.pl$'`};
    warn "$cmd ...\n";
    system $cmd;
    if ($? == 2) {
	die "SIGINT";
    }
}

sub spec_usage (;$) {
    my $msg = shift;
    die "ERROR: " . ($msg ? "$msg\n\n" : '') .
	"spec format is perlversion,stableness,daterange where
perlversion is something like '5.18.2'
stableness is either 'devel' or 'stable'
daterange is amount of days written as '-20d'
";
}

sub maybe_xterm_conf ($) {
    my $title = shift;
    our $HAVE_XTERM_CONF;
    if (!defined $HAVE_XTERM_CONF) {
	$HAVE_XTERM_CONF = is_in_path('xterm-conf') ? 1 : 0;
    }
    return if !$HAVE_XTERM_CONF;
    system('xterm-conf', '-f', '-title', $title);
}

# REPO BEGIN
# REPO NAME is_in_path /home/e/eserte/src/srezic-repository 
# REPO MD5 e18e6687a056e4a3cbcea4496aaaa1db

=head2 is_in_path($prog)

=for category File

Return the pathname of $prog, if the program is in the PATH, or undef
otherwise.

DEPENDENCY: file_name_is_absolute

=cut

sub is_in_path {
    my($prog) = @_;
    if (file_name_is_absolute($prog)) {
	if ($^O eq 'MSWin32') {
	    return $prog       if (-f $prog && -x $prog);
	    return "$prog.bat" if (-f "$prog.bat" && -x "$prog.bat");
	    return "$prog.com" if (-f "$prog.com" && -x "$prog.com");
	    return "$prog.exe" if (-f "$prog.exe" && -x "$prog.exe");
	    return "$prog.cmd" if (-f "$prog.cmd" && -x "$prog.cmd");
	} else {
	    return $prog if -f $prog and -x $prog;
	}
    }
    require Config;
    %Config::Config = %Config::Config if 0; # cease -w
    my $sep = $Config::Config{'path_sep'} || ':';
    foreach (split(/$sep/o, $ENV{PATH})) {
	if ($^O eq 'MSWin32') {
	    # maybe use $ENV{PATHEXT} like maybe_command in ExtUtils/MM_Win32.pm?
	    return "$_\\$prog"     if (-f "$_\\$prog" && -x "$_\\$prog");
	    return "$_\\$prog.bat" if (-f "$_\\$prog.bat" && -x "$_\\$prog.bat");
	    return "$_\\$prog.com" if (-f "$_\\$prog.com" && -x "$_\\$prog.com");
	    return "$_\\$prog.exe" if (-f "$_\\$prog.exe" && -x "$_\\$prog.exe");
	    return "$_\\$prog.cmd" if (-f "$_\\$prog.cmd" && -x "$_\\$prog.cmd");
	} else {
	    return "$_/$prog" if (-x "$_/$prog" && !-d "$_/$prog");
	}
    }
    undef;
}
# REPO END

# REPO BEGIN
# REPO NAME file_name_is_absolute /home/e/eserte/src/srezic-repository 
# REPO MD5 89d0fdf16d11771f0f6e82c7d0ebf3a8

=head2 file_name_is_absolute($file)

=for category File

Return true, if supplied file name is absolute. This is only necessary
for older perls where File::Spec is not part of the system.

=cut

BEGIN {
    if (eval { require File::Spec; defined &File::Spec::file_name_is_absolute }) {
	*file_name_is_absolute = \&File::Spec::file_name_is_absolute;
    } else {
	*file_name_is_absolute = sub {
	    my $file = shift;
	    my $r;
	    if ($^O eq 'MSWin32') {
		$r = ($file =~ m;^([a-z]:(/|\\)|\\\\|//);i);
	    } else {
		$r = ($file =~ m|^/|);
	    }
	    $r;
	};
    }
}
# REPO END

