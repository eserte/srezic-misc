#!/usr/bin/env perl
# -*- perl -*-

#
# Author: Slaven Rezic
#
# Copyright (C) 2008,2013,2014,2015,2017,2018,2021,2023 Slaven Rezic. All rights reserved.
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl itself.
#
# Mail: slaven@rezic.de
# WWW:  http://www.rezic.de/eserte/
#

=head1 NAME

cpan_recent_uploads2 - return list of recent CPAN uploads

=head1 SYNOPSIS

    cpan_recent_uploads2 [options]

=head1 DESCRIPTION

This script downloads the RECENT* files from a CPAN mirror and returns
the most recent CPAN distributions, one per line. The distributions
are returned in the long form, e.g. C<S/SR/SREZIC/Tk-804.034.tar.gz>.

It is assumed that L<CPAN.pm|CPAN> is configured, i.e. one or more
already mirrors specified. If this is not the case, then run

    perl -MCPAN -eshell
    quit

once.

If L<LWP::UserAgent::WithCache> is installed, then the fetched RECENT*
files are cached for 10 minutes.

=head2 OPTIONS

=over

=item C<< -from I<reltime> >>

=item C<< -to I<reltime> >>

Limit the filtered distributions for the specified period, e.g.

   -from -2d -to -1d

If not given, then the distributions from the last 24 hours are
returned.

=item C<< -url I<url> >>

Specify a mirror url instead of using the configured from
L<CPAN.pm|CPAN>.

=item C<< -onlystable >>

Only return stable releases, that is, remove TRIAL or underline
versions from the return list.

=item C<< -onlydists >>

Only return files which look like a proper CPAN distribution
(currently this is just a check for supported archive formats).

=item C<< -onlyindexed >>

Only return distributions which are also in the PAUSE index.

=item C<< -skipperl6 >>

Skip Perl6 distributions.

=item C<< -no-downgrades-for I<perlexe> >>

Avoid downgrades of dual life modules. Distributions containing such
modules won't be listed. Need perl executable as an option value to
call its version of L<Module::CoreList>.

=item C<< -v >>

Be more verbose. This option may given multiple times to increase
verbosity.

=item C<< -warnold >>

Warn (using a L<Tk> dialog>) if the fetched RECENT* files look old
(older than six hours). This may happen if the used mirror is broken
and stopped syncing, or if there was really no upload to PAUSE for
more than six hours (which is quite unlikely).

=item C<< -filter I<filtername> >>

Filters (TBD).

=back

=head1 AUTHOR

Slaven Rezic

=cut

use strict;
use warnings;
use CPAN;
use Getopt::Long;
my $LWP_UserAgent;
my %LWP_options;
BEGIN {
    if (eval q{ use LWP::UserAgent::WithCache 0.10; 1 }) {
	$LWP_UserAgent = 'LWP::UserAgent::WithCache';
	%LWP_options = (
			'namespace' => 'lwp-cache',
			'cache_root' => "$ENV{HOME}/.cache",
			'default_expires_in' => 600,
		       );
    } else {
	require LWP::UserAgent;
	$LWP_UserAgent = 'LWP::UserAgent';
    }
}
BEGIN {
    if (!eval q{ use YAML::XS qw(Load); 1 }) {
	if (!eval q{ use YAML::Syck qw(Load); 1 }) {
	    if (!eval q{ use YAML qw(Load); 1 }) {
		die "Cannot load YAML::XS or YAML:Syck or YAML: $@";
	    }
	}
    }
}

{
    package MyCPANShell;
    use vars qw(@ISA $VERBOSE);
    @ISA = $CPAN::Frontend;
    sub myprint {
	if ($VERBOSE) {
	    shift;
	    print STDERR @_;
	}
    }
    sub mywarn  { shift->myprint(@_) }
    $CPAN::Frontend = "MyCPANShell";
}

my($from, $to);
my $url;
my $v;
my $warn_old;
my $only_stable;
my $only_dists;
my $only_indexed;
my $no_downgrades_for_perl;
my $skip_perl6;
my @filters;

GetOptions("from=s" => \$from,
	   "to=s"   => \$to,
	   "url=s"  => \$url,
	   "onlystable|stable!" => \$only_stable,
	   "onlydists!" => \$only_dists,
	   "onlyindexed|indexed!" => \$only_indexed,
	   "skipperl6!" => \$skip_perl6,
	   "no-downgrades-for=s" => \$no_downgrades_for_perl,
	   "v+"     => \$v,
	   "warnold" => \$warn_old,
	   'filter=s@' => \@filters,
	  ) or die <<EOF;
usage: $0 [-from epoch] [-to epoch] [-url ...] [-stable | -indexed] [-skipperl6] [-onlydists] [-v [-v ...]] [-warnold] [-filter ...]
EOF

my $now = time;

my %unit2secs = (
		 "s" => 1,
		 "m" => 60,
		 "h" => 3600,
		 "d" => 86400,
		);
my $units_qr = '(?:' . join('|', map { quotemeta } keys %unit2secs) . ')'; $units_qr = qr{$units_qr};

for ($from, $to) {
    if (defined $_ && $_ =~ m{-(\d[\.\d]*)($units_qr)$}) {
	my($val, $unit) = ($1, $2);
	$_ = "-" . ($val * $unit2secs{$unit});
    }
}

for ($from, $to) {
    if (defined $_ && $_ !~ m{^-?\d+$}) {
	die "Invalid -from/-to value (translated: $_)";
    }
}

for ($from, $to) {
    if (defined $_ && m{^-(.*)}) {
	$_ = $now - $1;
    }
}

if (!defined $from && !defined $to) {
    $from = $now - 86400;
    $to   = $now;
} elsif (!defined $from) {
    $from = $to - 86400;
} elsif (!defined $to) {
    $to = $now;
}
$to = $now if $to > $now;

if ($v) {
    $MyCPANShell::VERBOSE = 1;
}

warn "INFO: Range from " . scalar(localtime $from) . " to " . scalar(localtime $to) . "\n" if $v;

# XXX is this really necessary?
$ENV{FTP_PASSIVE} = 1;

if (!$url) {
    cpan_handleconfig();
## unfortunately my http mirrors are not as recent as funet:
#    ($url) = grep { m{^http://} } @{ $CPAN::Config->{urllist} }; # prefer http
    if (!$url) {
	$url = $CPAN::Config->{urllist}->[0];
    }
}

if (!$url) {
    die "Cannot get any URL from urllist and no -url specified on cmdline";
}

$url =~ s{/+$}{}; # normalize?

my $ua = $LWP_UserAgent->new(%LWP_options);

my $recent = $url . "/authors/RECENT-1h.yaml";
warn "INFO: Fetching from $recent...\n" if $v;
my $resp = $ua->get($recent);
if (!$resp->is_success) {
    die "Error while fetching $recent: " . $resp->status_line;
}
my $recent_data = Load($resp->decoded_content);

if ($warn_old) {
    my $time = $recent_data->{meta}->{Producers}->{time};
    my $error_message;
    if (!$time) {
	$error_message = 'Cannot get data path meta.Producers.time (zero or non-existent)';
    } else {
	my $age = time - $time;
	my $accept_age = 3600*6; # assume every six hours an update
	if ($age > $accept_age) {
	    $error_message = sprintf "%s is too old: age is %.1f hour(s), but we accept only %.1f hour(s) or younger", $recent, $age/3600, $accept_age/3600;
	}
    }
    if ($error_message) {
	if (eval {
	    standalone_message_box(-message => $error_message);
	}) {
	    warn $error_message;
	}
    }
}

my @aggregator = @{ $recent_data->{meta}->{aggregator} || [] };

if ($v && $v >= 2) {
    *debug      = sub { warn "DEBUG: $_[0]\n" };
    *debug_code = sub { $_[0]->() };
} else {
    *debug      = sub { };
    *debug_code = sub { };
}

my %deleted_dist;

if ($only_indexed) {
    maybe_refresh_packages_index();
}

my $dangerous_dists;
if ($no_downgrades_for_perl) {
    $dangerous_dists = get_dangerous_dual_life_dists_for_perl($no_downgrades_for_perl);
}
 
GATHER_DATA: {
    my $last_epoch;
    while() {
    ENTRY: for my $entry (@{ $recent_data->{recent} }) {
	    debug_code(sub {
			   my @t = gmtime $entry->{epoch}; $t[4]++; $t[5]+=1900;
			   my($frac) = $entry->{epoch} =~ m{(\.\d+)$};
			   $frac = ".0" if !$frac;
			   my $date = sprintf "%04d-%02d-%02d %02d:%02d:%02d%s", @t[5,4,3,2,1,0], $frac;
			   debug("$date $entry->{path}");
		       });
	    debug("finished!"), last GATHER_DATA if $entry->{epoch} < $from;

	    # deleted flag
	    my $path = $entry->{path};
	    if ($entry->{type} eq 'delete') {
		$deleted_dist{$path} = 1;
		next;
	    }
	    debug("$path was marked as deleted"), next if exists $deleted_dist{$path};
	    debug("unhandled entry type: $entry->{type}"), next if $entry->{type} ne 'new';
	    debug("skipping over (already seen)"), next if defined $last_epoch && $entry->{epoch} >= $last_epoch;
	    $last_epoch = $entry->{epoch};
	    debug("skipping over (to)"), next if $entry->{epoch} > $to;
	    # strip "id/" from $path
	    debug("ignore (not in id)"), next if $path !~ m{^id/(.*)};
	    $path = $1;
	    if ($only_dists || $only_indexed) {
		# same list of extensions as in CPAN::DistnameInfo
		debug("ignore (not a dist)"), next if $path !~ m{(\.zip|\.tgz|\.tar\.(z|gz|bz2))$}i;
	    } else {
		debug("ignore (not a dist)"), next if $path =~ m{(\.patch|\.patch\.gz|CHECKSUMS|\.readme|\.meta)$};
		debug("ignore (not a dist)"), next if $path =~ m{/?00whois.(html|xml)$};
	    }
	    if ($skip_perl6) {
		debug("ignore (perl6 dist)"), next if $path =~ m{/Perl6/};
	    }
	    if ($only_stable) {
		require CPAN::DistnameInfo;
		CPAN::DistnameInfo->VERSION('0.10'); # support for -TRIAL
		my $distinfo = CPAN::DistnameInfo->new($path);
		debug("developer version"), next if $distinfo->maturity ne 'released';
	    }
	    my $get_distribution_object = do {
		my $do;
		sub {
		    return $do if defined $do;
		    $do = eval { CPAN::Shell->expand('Distribution', $path) };
		    if (!$do) { $do = 0 } # explicitly set to !undef
		    return $do;
		};
	    };
	    if ($only_indexed) {
		my $do = $get_distribution_object->();
		debug('not indexed'), next if !$do;
	    }
	    if ($no_downgrades_for_perl) {
		my $do = $get_distribution_object->();
		if ($do) {
		    my $base_dist = $do->base_id;
		    if ($dangerous_dists->{$base_dist}) {
			debug("$base_dist could cause a downgrade, skipping");
			next;
		    }
		}
	    }
	    debug('dist only in RECENT, not on CPAN'), next if $path =~ m{\QF/FZ/FZAKER/booking/appsec/Bookings-Security-CVSS-0.03.tar.gz\E$};
	    for my $filter (@filters) {
		no strict 'refs';
		my $filter_sub = \&{'filter_'.$filter};
		if (!defined $filter_sub) {
		    die "Invalid filter '$filter_sub'";
		}
		if (!$filter_sub->(path => $path)) {
		    debug("$path filtered out by $filter"), next ENTRY;
		}
	    }
	    print $path, "\n";
	}
	last GATHER_DATA if !@aggregator;
	my $next_aggregator = shift @aggregator;
	my $next_recent_url = $url . "/authors/RECENT-" . $next_aggregator . ".yaml";
	warn "Fetching from $next_recent_url...\n" if $v;
	my $resp = $ua->get($next_recent_url);
	if (!$resp->is_success) {
	    die "Error while fetching $next_recent_url: " . $resp->status_line;
	}
	$recent_data = Load($resp->decoded_content);
    }
}

{
    my $CPAN_HandleConfig_loaded;
    sub cpan_handleconfig {
	if (!$CPAN_HandleConfig_loaded) {
	    CPAN::HandleConfig->load;
	    $CPAN_HandleConfig_loaded = 1;
	}
    }
}

# Side effects:
# - loads CPAN config
# - adjust urllist (by adding $url)
# - may set index_expire to a high value (to disable forced reloads)
# - may refresh the CPAN package index
sub maybe_refresh_packages_index {
    cpan_handleconfig();
    unshift @{ $CPAN::Config->{urllist} }, $url;

    # Check whether we have to call force_reload(), or
    # if the 02packages.details.txt.gz file is already
    # fresh enough.
    my $packages_file = $CPAN::Config->{keep_source_where} . '/modules/02packages.details.txt.gz';
    my $need_forced_reload = 1;
    my(@s) = stat($packages_file);
    if (@s) {
	my $ua = LWP::UserAgent->new; # don't use ::WithCache ua here
	my $packages_url = $url . '/modules/02packages.details.txt.gz';
	my $res = $ua->head($packages_url);
	if ($res->code == 200) {
	    if ($res->last_modified <= $s[9]) {
		warn "INFO: $packages_url was not modified\n" if $v;
		$need_forced_reload = 0;
	    } else {
		warn "INFO: $packages_url was modified\n" if $v;
	    }
	} else {
	    warn "ERROR: HEAD $packages_url did not return 200 OK, but: " . $res->status_line. "\n";
	}
    } else {
	warn "INFO: packages file $packages_file does not exist (first-time fetch?)\n" if $v;
    }

    if ($need_forced_reload) {
	debug("do forced reload of CPAN indexes");
	CPAN::Index->force_reload();
    } else {
	$CPAN::Config->{index_expire} = 99999;
	debug("no forced reload of CPAN indexes necessary");
    }
}

sub get_dangerous_dual_life_dists_for_perl {
    my($perl_exe) = @_;
    my %mod_to_version;
    my @cmd = ($perl_exe, '-MModule::CoreList', '-e', '$mclv = $Module::CoreList::version{$]}; for my $mod (sort keys %$mclv) { print $mod, "\t", $mclv->{$mod}, "\n" }');
    open my $fh, '-|', @cmd
	or do {
	    warn "ERROR: can't execute '@cmd': $!\n";
	    warn "ERROR: dual life modules which would cause a downgrade will be listed!\n";
	    return {};
	};
    while(<$fh>) {
	chomp;
	my($mod, $version) = split /\s+/, $_;
	$mod_to_version{$mod} = $version;
    }

    my %dangerous_dists;
    {
	require CPAN::Version;
	if (eval { require Parse::CPAN::Packages::Fast; 1 }) {
	    my %cpan_dist_to_object;
	    my $pcpf = Parse::CPAN::Packages::Fast->new;
	    for my $mod (keys %mod_to_version) {
		my $cpan_mod_obj = $pcpf->package($mod);
		if ($cpan_mod_obj) {
		    my $cpan_dist_obj = $cpan_mod_obj->distribution;
		    my $cpan_dist = $cpan_dist_obj->dist;
		    next if $cpan_dist_to_object{$cpan_dist};
		    next if $cpan_dist eq 'perl';
		    $cpan_dist_to_object{$cpan_dist} = $cpan_dist_obj;
		}
	    }
	    for my $cpan_dist_obj (values %cpan_dist_to_object) {
		for my $cpan_mod_obj ($cpan_dist_obj->contains) {
		    my $mod = $cpan_mod_obj->package;
		    my $cpan_mod_version = $cpan_mod_obj->version;
		    if ($mod_to_version{$mod} && CPAN::Version->vgt($mod_to_version{$mod}, $cpan_mod_version)) {
			#debug("$mod is dangerous: thisperl=$mod_to_version{$mod} > cpan=$cpan_mod_version");
			$dangerous_dists{$cpan_dist_obj->distvname} = 1;
		    }
		}
	    }
	} else {
	    my %cpan_dist_to_object;
	    my %cpan_mod_to_object;
	    for my $mod (keys %mod_to_version) {
		my $cpan_mod_obj = CPAN::Shell->expand('Module', $mod);
		if ($cpan_mod_obj) {
		    my $cpan_dist_obj = $cpan_mod_obj->distribution;
		    (my $cpan_dist = $cpan_dist_obj->base_id) =~ s{-[\d._]+$}{};
		    next if $cpan_dist_to_object{$cpan_dist};
		    next if $cpan_dist eq 'perl';
		    $cpan_dist_to_object{$cpan_dist} = $cpan_dist_obj;
		    $cpan_mod_to_object{$mod} = $cpan_mod_obj;
		}
	    }
	    # CPAN::Distribution::containsmods is quite slow when
	    # called repeatedly --- create a dist-to-mods cache.
	    my %dist_to_mods;
	    for my $cpan_mod_obj ($CPAN::META->all_objects("CPAN::Module")) {
		my $dist_id = $cpan_mod_obj->cpan_file;
		if ($dist_id) {
		    push @{ $dist_to_mods{$dist_id} }, $cpan_mod_obj;
		}
	    }
	    for my $cpan_dist_obj (values %cpan_dist_to_object) {
		my $dist_id = $cpan_dist_obj->id;
		for my $cpan_mod_obj (@{ $dist_to_mods{$dist_id} || [] }) {
		    if ($cpan_mod_obj) {
			my $mod = $cpan_mod_obj->{ID};
			my $cpan_mod_version = $cpan_mod_obj->cpan_version;
			if ($mod_to_version{$mod} && CPAN::Version->vgt($mod_to_version{$mod}, $cpan_mod_version)) {
			    $dangerous_dists{$cpan_dist_obj->base_id} = 1;
			}
		    }
		}
	    }
	}
	debug_code(sub {
		       warn "DEBUG: dangerous distributions:\n";
		       for my $dist (sort keys %dangerous_dists) {
			   warn "  $dist\n";
		       }
		   });
    }
    \%dangerous_dists;
}

sub filter_cpu_intensive_at_night {
    my(%opt) = @_;
    my $path = delete $opt{path}; die "path is mandatory" if !defined $path;
    die "Unhandled options: " . join(" ", %opt) if %opt;

    my @l = localtime;
    my $hour = $l[2];
    if ($path =~ m{/(
		       Test2-Harness-v?\d         # very CPU intensive test suite
		   |   Test2-Harness-UI-v?\d      # some Test2-Harness revdeps
		   |   Test2-Plugin-pgTAP-v?\d    # -"-
		   |   Test2-Plugin-Feature-v?\d  # -"-
		   |   App-PerlNitpick-v?\d       # -"-
		   |   Test2-Harness-Renderer-JUnit-v?\d # -"-
		   |   Alien-libsdl2-v?\d         # CPU intensive build of C library
		   |   Crypt-Perl-\d              # CPU intensive on some systems (missing fast math libraries?)
		   |   Locale-CLDR-Locales-.*     # there are a lot of these...
		   )}x && $hour >= 7) {
	return 0;
    }
    return 1;
}

{
    my $filter_config_checked;
    my $filter_rx;

    sub filter_by_file {
	my(%opt) = @_;
	my $path = delete $opt{path}; die "path is mandatory" if !defined $path;
	die "Unhandled options: " . join(" ", %opt) if %opt;

	if (!$filter_config_checked) {
	    my $filter_file = "$ENV{HOME}/.config/cpan_recent_uploads2_filter";
	    if (!open my $fh, $filter_file) {
		warn "WARNING: --filter by_file specified, but $filter_file cannot be loaded.\n";
	    } else {
		my @dists;
		while(<$fh>) {
		    chomp;
		    s/\s+#.*//; # ignore comments
		    next if $_ eq '';
		    push @dists, $_;
		}
		if (@dists) {
		    $filter_rx = '/(?:' . join('|', @dists) . ')';
		    $filter_rx = qr{$filter_rx};
		} else {
		    warn "INFO: no dists found in $filter_file.\n";
		}
	    }
	    $filter_config_checked = 1;
	}

	return 1 if !defined $filter_rx;

	return 0 if $path =~ $filter_rx;

	return 1;
    }
}

# REPO BEGIN
# REPO NAME standalone_message_box /home/e/eserte/src/srezic-repository 
# REPO MD5 c4592f93ed4afa4f6a93d9ff38d2e905

#=head2 standalone_message_box
#
#=for category Tk
#
#A message box which can be invoked without Tk being loaded before. It
#uses the same arguments as messageBox from Tk, but is always invoked
#as a function. Return the messageBox answer.
#
#=cut

sub standalone_message_box {
    my %args = @_;
    require Tk;
    my $mw_created;
    my(@mw) = Tk::MainWindow::Existing();
    if (!@mw) {
	push @mw, MainWindow->new();
	$mw[0]->withdraw;
	$mw_created++;
    }
    $args{-icon}  = 'error' unless exists $args{-icon};
    $args{-title} = 'Error' unless exists $args{-error};
    $args{-type}  = 'OK'    unless exists $args{-type};
    my $answer = $mw[0]->messageBox(%args);
    if ($mw_created) {
	$mw[0]->destroy;
    }
    $answer;
}

# REPO END

