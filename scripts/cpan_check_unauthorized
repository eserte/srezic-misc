#!/usr/bin/perl -w
# -*- perl -*-

#
# $Id: cpan_check_unauthorized,v 1.4 2009/11/08 19:01:51 eserte Exp $
# Author: Slaven Rezic
#
# Copyright (C) 2007 Slaven Rezic. All rights reserved.
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl itself.
#
# Mail: slaven@rezic.de
# WWW:  http://www.rezic.de/eserte/
#

use strict;
use CGI qw();
use Getopt::Long;
use LWP::Simple qw(get);
use HTML::TreeBuilder::XPath;
use YAML qw(Load);

sub trim ($);

my($user, $password, $dist, $v);
{
    my $dot_pause = "$ENV{HOME}/.pause";
    if (open my $fh, $dot_pause) {
	while(<$fh>) {
	    if (/^user\s*=\s*(\S+)/) {
		$user = $1;
	    } elsif (/^password\s*=\s*(\S+)/) {
		$password = $1;
	    }
	}
    }
}

GetOptions("user=s" => \$user,
	   "password=s" => \$password,
	   "dist=s" => \$dist,
	   "v" => \$v,
	  )
    or die "usage!";

if (!$user) {
    die "Please specify -user";
}
if (!$dist) {
    die "Please specify -dist";
}
if ($dist =~ m{\.tar\.gz$}) {
    die "Please specify -dist without archive extension, i.e. without .tar.gz";
}
if ($dist =~ m{/}) {
    die "Please specify -dist with basename only";
}

if (!defined $password) {
    print STDERR "Password for $user\@pause: ";
    $password = get_password();
    print STDERR "\n";
}
if (!defined $password || $password eq '') {
    die "Please specify password";
}

my $disturl = "http://search.cpan.org/~$user/$dist/";
if ($v) {
    warn "Try to get <$disturl>...\n";
}
my $content = get($disturl);
if (!$content) {
    die "Cannot get <$disturl>, please check user and dist name";
}

my $p = HTML::TreeBuilder::XPath->new;
if ($v) {
    warn "Try to parse content from <$disturl>...\n";
}
$p->parse($content);

my @unauthorized_modules;
for my $node ($p->findnodes('//td[.="UNAUTHORIZED"]/../td[position()=1]')) {
    push @unauthorized_modules, trim($node->getValue);
}

for my $module (@unauthorized_modules) {
    my $pause_check_url = "https://pause.perl.org/pause/authenquery?" .
	CGI->new({pause99_peek_perms_by=>"me",
		  pause99_peek_perms_query=>$module,
		  pause99_peek_perms_sub=>1,
		  OF=>"YAML",
		 })->query_string;
    if ($v) {
	warn "Check on PAUSE: $pause_check_url\n";
    }
    $pause_check_url =~ s{^(https://)}{$1$user:$password\@};
    my $yaml = get($pause_check_url);
    if (!$yaml) {
	warn "Cannot get permission data for module <$module>...\n";
    } else {
	print "--\n";
	my $perm = Load($yaml);
	for my $p (@$perm) {
	    print "Module: $p->{module}\n  Userid: $p->{userid}";
	    if ($p->{userid} eq $p->{owner}) {
		print " (Owner)";
	    }
	    print "\n";
	    print "  Name: $p->{fullname}\n";
	}
    }
}


# REPO BEGIN
# REPO NAME trim /home/e/eserte/work/srezic-repository 
# REPO MD5 ab2f7dfb13418299d79662fba10590a1

=head2 trim($string)

=for category Text

Trim starting and leading white space and squeezes white space to a
single space.

=cut

sub trim ($) {
    my $s = shift;
    return $s if !defined $s;
    $s =~ s/^\s+//;
    $s =~ s/\s+$//;
    $s =~ s/\s+/ /;
    $s;
}
# REPO END


# REPO BEGIN
# REPO NAME get_password /home/e/eserte/work/srezic-repository 
# REPO MD5 260645ad15d9259849059e682785d7d3

=head2 get_password()

=for category Term

Get password. The terminal is set to noecho before (if Term::ReadKey is
available).

=cut

sub get_password {
    my $password;
    if (eval { require Term::ReadKey }) {
	$| = 1;
	Term::ReadKey::ReadMode('noecho');
	chomp($password = <STDIN>);
	Term::ReadKey::ReadMode('restore');
    } else {
	warn <<EOF;
Term::ReadKey is not installed on this system, which means that the
password will be echoed to the terminal.
EOF
        chomp($password = <STDIN>);
    }
    $password;
}
# REPO END



__END__
